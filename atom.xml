<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>6v&#39;s blog</title>
  <icon>https://www.gravatar.com/avatar/7a52fcfe31aa1240cb44e81ed48125d9</icon>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wliu6v.github.io/"/>
  <updated>2018-04-07T10:26:36.167Z</updated>
  <id>http://wliu6v.github.io/</id>
  
  <author>
    <name>6v</name>
    <email>linvan6v@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android 虚拟按键在不同版本上的位置问题</title>
    <link href="http://wliu6v.github.io/Android-Navigation-Bar-Position/"/>
    <id>http://wliu6v.github.io/Android-Navigation-Bar-Position/</id>
    <published>2018-01-13T03:42:47.000Z</published>
    <updated>2018-04-07T10:26:36.167Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>当 Android 手机设备进行横屏状态时，其虚拟按键的位置在不同版本上位置可能不同。</p></blockquote><a id="more"></a><h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>应用里面为了实现全局的右滑返回效果而引入了一个 SwipeBack 库 （<a href="https://github.com/ikew0ng/SwipeBackLayout" target="_blank" rel="noopener">GitHub - SwipeBackLayout</a>），然后将基类的 Activity 直接继承自 SwipeBackActivity。这之后就发现在 Android 7.0 的手机上横屏时，整个布局都向屏幕左侧移动了一些，导致左边被虚拟按键给挡住了。效果如下图：</p><p><img src="/img/Android-Navigation-Bar/Android-Navigation-Bar-1.png" alt="左边被挡住了"></p><p>经反复测试后发现，只有在 Android 7.0 及以上版本的手机设备上，将设备顺时针旋转 90 度后才会出现该问题。如果是逆时针旋转、6.0 及以下设备、或者平板设备都不会有这个问题。这是因为从 Android 7.0 开始，虚拟按键的位置在横屏状态下发生了变化。在以前版本的手机设备中，横屏时的虚拟按键总是在屏幕右侧，而 Android 7.0 将虚拟按键在横屏状态下的位置改为了“总是接近设备底部”。就是说，如果手机顺时针旋转 90 度，此时设备底部在左侧，虚拟按键也就随之出现在左侧。而如果是逆时针旋转 90 度则在右侧，跟以前一样。</p><p>见下图，上面是 Android 6.0 设备，下图是 7.0。</p><p><img src="/img/Android-Navigation-Bar/Android-Navigation-Bar-2.png" alt="对比图"></p><p>此外，平板设备上因为虚拟按键总在屏幕底部，所以也不存在该问题。</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>这个 SwipeBackActivity 的实现方式是在 <code>Activity.onPostCreate</code> 的时候，获取布局根层的 DecorView，将其子 view 作为 swipeBackLayout 的子 view，然后再将 swipeBackLayout 插进 DecorView 中。从而做到在不修改 layout 文件的情况下将 swipeBackLayout 变成根 view。从这个实现方式上很显然可以猜到，这个替换的过程导致了布局的异常。因此要解决该问题，容易想到的一个方式就是直接在每个 acitivty 的布局里面写上 swipeBackLayout，不使用这种 onPostCreate 时强行修改根布局的方式即可。但是那样的话要修改的地方太多，我们还是希望在原先的基础上做尽量少的改动将问题解决。因此我们考虑在 SwipeBackLayout 上将布局移动到正确的位置。</p><p>首先是考虑如何获取虚拟按键当前在屏幕上的位置，在 <a href="http://androidxref.com/7.0.0_r1/xref/frameworks/base/core/java/com/android/internal/policy/DecorView.java#998" target="_blank" rel="noopener">AndroidXRef</a> 上从 Android 源码一层层跟进去之后发现实现过于复杂，因此直接用现有的信息进行条件判断： Android 7.0 以上、手机设备，顺时针旋转 90 度。</p><p>知道了虚拟按键的位置之后就要计算虚拟按键的高度。我们可以通过 WindowManager 中 getdefaultDisplay 之后的 <code>getRealSize</code> 和 <code>getSize</code> 这两个方法进行计算。</p><p>最后主要的代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected void onLayout(boolean changed, int left, int top, int right, int bottom) &#123;</span><br><span class="line">    mInLayout = true;</span><br><span class="line">    if (mContentView != null) &#123;</span><br><span class="line">        mContentLeft = getLeftPadding(mActivity);</span><br><span class="line">        mContentView.layout(mContentLeft, mContentTop,</span><br><span class="line">                mContentLeft + mContentView.getMeasuredWidth(),</span><br><span class="line">                mContentTop + mContentView.getMeasuredHeight());</span><br><span class="line">    &#125;</span><br><span class="line">    mInLayout = false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private int getLeftPadding(Context context) &#123;</span><br><span class="line"></span><br><span class="line">    // 1. Android Version &gt;= 7.0</span><br><span class="line">    if (Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.N) &#123;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 2. Is Mobile Phone</span><br><span class="line">    if (context.getResources().getConfiguration().smallestScreenWidthDp &gt;= 600) &#123;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 3. is 270 rotation</span><br><span class="line">    int screenAngle = getScreenRotationAngle(context);</span><br><span class="line">    if (screenAngle != Surface.ROTATION_270) &#123;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 4. get navigation height</span><br><span class="line">    return getNavigationBarHeight(context);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public int getNavigationBarHeight(Context context) &#123;</span><br><span class="line">    WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);</span><br><span class="line">    if (wm == null) &#123;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Display display = wm.getDefaultDisplay();</span><br><span class="line"></span><br><span class="line">    Point devicePoint = new Point();</span><br><span class="line">    display.getRealSize(devicePoint);</span><br><span class="line"></span><br><span class="line">    Point appPoint = new Point();</span><br><span class="line">    display.getSize(appPoint);</span><br><span class="line"></span><br><span class="line">    if (appPoint.x &lt; devicePoint.x) &#123; // landscape</span><br><span class="line">        return devicePoint.x - appPoint.x;</span><br><span class="line">    &#125; else if (appPoint.y &lt; devicePoint.y) &#123; // portrait</span><br><span class="line">        return devicePoint.y - appPoint.y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public int getScreenRotationAngle(Context context) &#123;</span><br><span class="line">    WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);</span><br><span class="line">    if (wm == null) &#123;</span><br><span class="line">        return Surface.ROTATION_0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Display display = wm.getDefaultDisplay();</span><br><span class="line">    return display.getRotation();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BTW，<strong>设备</strong>顺时针旋转 90 度意味着<strong>屏幕上的内容</strong>要顺时针旋转 270 度，因此上面对于旋转角度的判断是 ROTATION_270 而非 ROTATION_90。</p><h1 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h1><ul><li><a href="https://stackoverflow.com/questions/21057035/detect-android-navigation-bar-orientation" target="_blank" rel="noopener">Detect Android Navigation Bar orientation</a></li><li><a href="https://stackoverflow.com/questions/36514167/how-to-really-get-the-navigation-bar-height-in-android" target="_blank" rel="noopener">How to REALLY get the navigation bar height in Android</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;当 Android 手机设备进行横屏状态时，其虚拟按键的位置在不同版本上位置可能不同。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://wliu6v.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Config Multi GitHub Account on Windows</title>
    <link href="http://wliu6v.github.io/Config-Multi-GitHub-Account-on-Windows/"/>
    <id>http://wliu6v.github.io/Config-Multi-GitHub-Account-on-Windows/</id>
    <published>2017-10-26T14:38:37.000Z</published>
    <updated>2018-04-07T10:16:37.550Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>用 .git-credentials 文件的方式只能对每个站点配置一个账号。如果希望为同一个站点（比如 Github）配置两个账号的话需要用 ssh 实现。</p></blockquote><a id="more"></a><p>当我们用 git 从 github 的私有库拉取代码的时候，需要提供对应的权限。最基础的方式是每次 git fetch 的时候都输入用户名与密码。而我们也可以通过配置 .git-credentials 文件的方式避免每次都重复输入。</p><p>但是 .git-credentials 文件的一个缺陷是只能为每个站点配置一个账号。如果是多个站点，比如 github.com 与 bitbucket.org 的话很容易配置，但是如果在同一个站点比如 GitHub 有多个账号的话，那么就只能使用 ssh 的方式进行配置。</p><h1 id="配置步骤"><a href="#配置步骤" class="headerlink" title="配置步骤"></a>配置步骤</h1><blockquote><p>操作系统 Windows，命令行环境为 git 自带的 git bash。 不能用 cmd，会缺少一些必要命令。</p></blockquote><h2 id="1-为各个账号创建-ssh-文件"><a href="#1-为各个账号创建-ssh-文件" class="headerlink" title="1. 为各个账号创建 ssh 文件"></a>1. 为各个账号创建 ssh 文件</h2><ul><li><code>ssh-keygen -t rsa -C &quot;your_email_1@gmail.com&quot;</code><ul><li>此处需输入存放的路径，一般放在 用户文件夹下的 .ssh 目录中。因为要配置多个账号，建议在文件名上进行区别。比如: <code>~/.ssh/id_rsa_your_email_1</code></li><li>之后输入密码，不需要的话就直接两下回车。</li></ul></li><li><code>ssh-keygen -t rsa -C &quot;your_email_2@163.com&quot;</code></li></ul><p>每条命令可以得到一个私钥跟一个公钥文件。公钥文件多了后缀名 pub。</p><p><img src="/img/Config-Multi-GitHub-Account-on-Windows/Config-Multi-GitHub-Account-1.png" alt="ssh-keygen -t rsa -C &quot;your_email_1@gmail.com&quot;"></p><h2 id="2-令-git-bash-启动的时候自动加载-ssh-文件"><a href="#2-令-git-bash-启动的时候自动加载-ssh-文件" class="headerlink" title="2. 令 git bash 启动的时候自动加载 ssh 文件"></a>2. 令 git bash 启动的时候自动加载 ssh 文件</h2><p>找到 .bashrc 文件。在 linux 底下是 ~/.bashrc。 在 windows 下应该是在 git 安装目录的 etc/bash.bashrc 文件。添加以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">env=~/.ssh/agent.env</span><br><span class="line"><span class="function"><span class="title">agent_load_env</span></span> () &#123; <span class="built_in">test</span> -f <span class="string">"<span class="variable">$env</span>"</span> &amp;&amp; . <span class="string">"<span class="variable">$env</span>"</span> &gt;| /dev/null ; &#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="title">agent_start</span></span> () &#123;</span><br><span class="line">    (<span class="built_in">umask</span> 077; ssh-agent &gt;| <span class="string">"<span class="variable">$env</span>"</span>)</span><br><span class="line">    . <span class="string">"<span class="variable">$env</span>"</span> &gt;| /dev/null ; &#125;</span><br><span class="line"> </span><br><span class="line">agent_load_env</span><br><span class="line"> </span><br><span class="line"><span class="comment"># agent_run_state: 0=agent running w/ key; 1=agent w/o key; 2= agent not running</span></span><br><span class="line">agent_run_state=$(ssh-add -l &gt;| /dev/null 2&gt;&amp;1; <span class="built_in">echo</span> $?)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> [ ! <span class="string">"<span class="variable">$SSH_AUTH_SOCK</span>"</span> ] || [ <span class="variable">$agent_run_state</span> = 2 ]; <span class="keyword">then</span></span><br><span class="line">    agent_start</span><br><span class="line">    ssh-add ~/.ssh/id_rsa_your_email_1   <span class="comment"># 这里修改成 ssh-add 接上上面配置的路径</span></span><br><span class="line">    ssh-add ~/.ssh/id_rsa_your_email_2   <span class="comment"># 这里修改成 ssh-add 接上上面配置的路径</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="string">"<span class="variable">$SSH_AUTH_SOCK</span>"</span> ] &amp;&amp; [ <span class="variable">$agent_run_state</span> = 1 ]; <span class="keyword">then</span></span><br><span class="line">    ssh-add ~/.ssh/id_rsa_your_email_1   <span class="comment"># 这里修改成 ssh-add 接上上面配置的路径</span></span><br><span class="line">    ssh-add ~/.ssh/id_rsa_your_email_2   <span class="comment"># 这里修改成 ssh-add 接上上面配置的路径</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">unset</span> env</span><br></pre></td></tr></table></figure><p><img src="/img/Config-Multi-GitHub-Account-on-Windows/Config-Multi-GitHub-Account-2.png" alt="ssh-keygen -t rsa -C &quot;your_email_1@gmail.com&quot;"></p><p>修改完成后，关闭 git bash 再重新打开，应该会看到 Identity added 的信息</p><p><img src="/img/Config-Multi-GitHub-Account-on-Windows/Config-Multi-GitHub-Account-5.png" alt="ssh-keygen -t rsa -C &quot;your_email_1@gmail.com&quot;"></p><h2 id="3-在-Github-中配置对应的密钥"><a href="#3-在-Github-中配置对应的密钥" class="headerlink" title="3. 在 Github 中配置对应的密钥"></a>3. 在 Github 中配置对应的密钥</h2><p>在两个账号的 GitHub 下分别进行配置。add key 的时候将公钥文件（.pub 结尾的文件）内容全都 copy 上去。通常是以 ssh-rsa 开头，账号结尾。title 随便取，如果有多台电脑的话，可以用电脑名进行区分。</p><p><img src="/img/Config-Multi-GitHub-Account-on-Windows/Config-Multi-GitHub-Account-3.png" alt="ssh-keygen -t rsa -C &quot;your_email_1@gmail.com&quot;"></p><p><img src="/img/Config-Multi-GitHub-Account-on-Windows/Config-Multi-GitHub-Account-4.png" alt="ssh-keygen -t rsa -C &quot;your_email_1@gmail.com&quot;"></p><h2 id="4-用-ssh-连接替代-http-连接。"><a href="#4-用-ssh-连接替代-http-连接。" class="headerlink" title="4. 用 ssh 连接替代 http 连接。"></a>4. 用 ssh 连接替代 http 连接。</h2><p>之后在进行 git clone 的时候就可以选择 ssh 地址。如果是本地已经存在的库，可以通过 <code>git remote set-url</code> 命令进行修改。 <code>git remote set-url origin git@github.com:foo/bar.git</code></p><p>要如何查看当前 git 目录所关联的远程主机，用 <code>git remote -v</code></p><h2 id="5-对不同的库使用不同的账号身份"><a href="#5-对不同的库使用不同的账号身份" class="headerlink" title="5. 对不同的库使用不同的账号身份"></a>5. 对不同的库使用不同的账号身份</h2><p>每次拉取代码之后，修改 git config –local 的 user.email 和 user.name，避免提交的时候，用 A 账号的信息往 B 的库里面提交了内容。</p><h1 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h1><ul><li><a href="https://help.github.com/articles/working-with-ssh-key-passphrases/#auto-launching-ssh-agent-on-git-for-windows" target="_blank" rel="noopener">working-with-ssh-key-passphrases</a></li><li><a href="https://gist.github.com/jexchan/2351996" target="_blank" rel="noopener">Multiple SSH Keys settings for different github account</a></li><li><a href="https://stackoverflow.com/questions/17846529/could-not-open-a-connection-to-your-authentication-agent" target="_blank" rel="noopener">could-not-open-a-connection-to-your-authentication-agent</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;用 .git-credentials 文件的方式只能对每个站点配置一个账号。如果希望为同一个站点（比如 Github）配置两个账号的话需要用 ssh 实现。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Git" scheme="http://wliu6v.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>EmojiEditText 控件会覆盖 XML 中定义的 inputType 属性</title>
    <link href="http://wliu6v.github.io/EmojiEditText-override-inputtype/"/>
    <id>http://wliu6v.github.io/EmojiEditText-override-inputtype/</id>
    <published>2017-10-18T06:58:47.000Z</published>
    <updated>2017-10-19T12:38:50.118Z</updated>
    
    <content type="html"><![CDATA[<p>最近项目中引入了 support 26 中的 EmojiEditText (<code>com.android.support:support-emoji:26.1.0</code>)，我们自定义的 BaseEditText 也继承了 EmojiEditText。后来突然发现，在使用原生键盘输入密码的时候会出现单词联想提示了。而按理说，在 xml 里面设置了 <code>inputType=&quot;textPassword&quot;</code> 的话，是不应该有联想提示的。</p><a id="more"></a><p><img src="/img/Emoji-Et-demo.png" alt="正常的密码输入键盘与使用了 EmojiEditText 之后的密码键盘区别"></p><p><em>只有左图是正常的，中图和右图都使用了 EmojiEditText，可以看到无论是否添加 textNoSuggestion，结果都是错误的</em></p><p>经排查后发现，只有 EmojiEditText 会存在该问题，如果直接使用原生的 EditText 则正常。</p><p>当我们设置 textPassword 之后，EditText.getInputType() 的值是 129。然而 EmojiTextView 会在 init 过程中执行一句 <code>setKeyListener(super.getKeyListener)</code> （如下图），这行代码会导致 EditText 的 inputType 变为 1。</p><p><img src="/img/Emoji-Et-init.png" alt="EmojiEditText init 方法中导致 inputType 出错的语句"></p><p>EmojiEditText 虽然重写了 <code>setKeyListener()</code> 方法，但是其内部实现与父类相比并没有什么特别的。我们可以创建一个正常的 TextView，设置其 inputType=”textPassword” ，然后执行下列语句：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Log.d(<span class="string">"6v"</span>, <span class="string">"InputType="</span> + tv.getInputType()); <span class="comment">// inputType=129</span></span><br><span class="line">tv.setKeyListener(tv.getKeyListener());</span><br><span class="line">Log.d(<span class="string">"6v"</span>, <span class="string">"InputType="</span> + tv.getInputType()); <span class="comment">// inputType=1</span></span><br></pre></td></tr></table></figure><p>可以看到即使什么也不做，只是简单地执行一下 <code>setKeyListener()</code> ，也会导致 inputType 被重置。因为 TextView 会在 <code>setKeyListener()</code> 方法中会将 TextView 自身的 inputType 设置为 keyListener 的 inputType。相关代码如下：</p><p><img src="/img/Emoji-Et-Keylistener.png" alt="Emoji setKeyListener 相关代码"></p><p>而继续往下追踪，我们不难发现，在 TextView 初始化过程中，会根据 inputType 去生成不同类型的 KeyListener：TextKeyListener, DigitsKeyListener, DateKeyListener 等等，通过这些不同类型的 KeyListener 去限制用户输入的内容。在 TextKeyListener 中还会根据 <strong>是否存在大写限制</strong> 与 <strong>是否自动纠正</strong> 产生不同的细分，然而 <strong>是否为密码</strong> 并不在考虑范围内。因此无论是 textPassword 还是默认的 inputType，都会产生同一个类型的 textKeyListener （inputType=1） 。在正常使用中，这里的处理没什么问题。但如果我们重新执行了 <code>setKeyListener()</code>，就会导致 TextView 的 inputType 被覆盖为 1，使得谷歌原生键盘产生了单词联想。</p><p>因此，如果要解决这个 Bug，只能引入 EmojiEditText 的源码，修改其 init 逻辑，在执行 <code>setKeyListener()</code> 之前先保存一下 <code>TextView.getInputType()</code> 的值，然后 <code>setKeyListener()</code> 之后再重新 <code>setInputType()</code>。</p><p>然而这么做实在是太复杂，所以最后的解决方案只是简单地将所有存在 <code>inputType=&quot;textPassword&quot;</code> 的地方改成了 EditText （而不是原来的自定义基类 EditText）。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近项目中引入了 support 26 中的 EmojiEditText (&lt;code&gt;com.android.support:support-emoji:26.1.0&lt;/code&gt;)，我们自定义的 BaseEditText 也继承了 EmojiEditText。后来突然发现，在使用原生键盘输入密码的时候会出现单词联想提示了。而按理说，在 xml 里面设置了 &lt;code&gt;inputType=&amp;quot;textPassword&amp;quot;&lt;/code&gt; 的话，是不应该有联想提示的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://wliu6v.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>【译】在 RecyclerView 中使用 DiffUtil</title>
    <link href="http://wliu6v.github.io/Use-DiffUtil-in-RecyclerView/"/>
    <id>http://wliu6v.github.io/Use-DiffUtil-in-RecyclerView/</id>
    <published>2017-08-02T06:32:12.000Z</published>
    <updated>2017-08-06T13:58:51.302Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://medium.com/@iammert/using-diffutil-in-android-recyclerview-bdca8e4fbb00" target="_blank" rel="noopener">原文：Using DiffUtil in Android RecyclerView</a></p><blockquote><p>使用 DiffUtil 从而避免使用 notifyDataSetChanged 更新 RecyclerView 中的数据</p></blockquote><a id="more"></a><blockquote><p>DiffUtil 是一个用来计算两个列表之间差别的工具类，它会输出一个将 list1 转化为 list2 的操作列表。这通常用来计算 RecyclerView Adapter 的更新逻辑</p></blockquote><p>很多时候我们的数据列表是完全变化的。我们会将新的列表赋值给 RecyclerView Adapter，并调用 notifyDataSetChanged 来更新 Adapter。但是 NotifyDataSetChanged 操作花销高昂， 而使用 DiffUtil 类就可以完美的解决这个问题。</p><p>让我们创建一个用例。假设我们有一个人员列表，我们可以随机添加人员，然后按照年龄将其排序，并更新到 RecyclerView 中。</p><p>我将用静态数据类使得示例代码尽量简洁：</p><h2 id="DataProvider-java"><a href="#DataProvider-java" class="headerlink" title="DataProvider.java"></a>DataProvider.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataProvider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Person&gt; <span class="title">getOldPersonList</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Person&gt; persons = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        persons.add(<span class="keyword">new</span> Person(<span class="number">1</span>, <span class="number">20</span>, <span class="string">"John"</span>));</span><br><span class="line">        persons.add(<span class="keyword">new</span> Person(<span class="number">2</span>, <span class="number">12</span>, <span class="string">"Jack"</span>));</span><br><span class="line">        persons.add(<span class="keyword">new</span> Person(<span class="number">3</span>, <span class="number">8</span>, <span class="string">"Michael"</span>));</span><br><span class="line">        persons.add(<span class="keyword">new</span> Person(<span class="number">4</span>, <span class="number">19</span>, <span class="string">"Rafael"</span>));</span><br><span class="line">        <span class="keyword">return</span> persons;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Person&gt; <span class="title">sortByAge</span><span class="params">(List&lt;Person&gt; oldList)</span></span>&#123;</span><br><span class="line">        Collections.sort(oldList, <span class="keyword">new</span> Comparator&lt;Person&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Person person, Person person2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> person.age - person2.age;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> oldList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在我们的主角登场了。DiffUtil.Callback 是一个抽象类，它有 4 个抽象方法和 1 个非抽象方法。接下来让我们简单介绍一下。</p><h2 id="DiffUtil-Callback方法"><a href="#DiffUtil-Callback方法" class="headerlink" title="DiffUtil.Callback方法"></a>DiffUtil.Callback方法</h2><ul><li><code>getOldListSize()</code> : 返回旧列表的大小;</li><li><code>getNewListSize()</code> : 返回新列表的大小;</li><li><code>areItemsTheSame(int oldItemPosition, int newItemPosition)</code> : DiffUtil 使用这个方法来判断两个对象是否表示相同的 Item。如果 Item 有唯一 ID ，那么该方法应使用 ID 判断这些 Item 是否相同。【译者注：此处返回值将控制 Item Added/Moved/Removed 等行为】</li><li><code>areContentsTheSame(int oldItemPosition, int newItemPosition)</code> : 检查两个项目是否具有相同的数据。您可以根据您的 UI 更改其行为。只有当 <code>areItemsTheSame</code> 返回 true 时，此方法才被 DiffUtil 调用。【译者注：此处返回 false 将触发 Item Changed 行为】</li><li><code>getChangePayload(int oldItemPosition, int newItemPosition)</code> : 当 areItemTheSame 返回 true 并且 isContentsTheSame 返回 false 时，DiffUtil 调用此方法以获取有关该更改的有效负载。在当前的实例中并没有使用 payload object。但是你可以通过<a href="https://proandroiddev.com/diffutil-is-a-must-797502bc1149" target="_blank" rel="noopener">这个示例</a>进行尝试。</li></ul><h2 id="MyDiffUtilCallback-java"><a href="#MyDiffUtilCallback-java" class="headerlink" title="MyDiffUtilCallback.java"></a>MyDiffUtilCallback.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyDiffCallback</span> <span class="keyword">extends</span> <span class="title">DiffUtil</span>.<span class="title">Callback</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    List&lt;Person&gt; oldPersons;</span><br><span class="line">    List&lt;Person&gt; newPersons;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyDiffCallback</span><span class="params">(List&lt;Person&gt; newPersons, List&lt;Person&gt; oldPersons)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.newPersons = newPersons;</span><br><span class="line">        <span class="keyword">this</span>.oldPersons = oldPersons;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOldListSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> oldPersons.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNewListSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> newPersons.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">areItemsTheSame</span><span class="params">(<span class="keyword">int</span> oldItemPosition, <span class="keyword">int</span> newItemPosition)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> oldPersons.get(oldItemPosition).id == newPersons.get(newItemPosition).id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">areContentsTheSame</span><span class="params">(<span class="keyword">int</span> oldItemPosition, <span class="keyword">int</span> newItemPosition)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> oldPersons.get(oldItemPosition).equals(newPersons.get(newItemPosition));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getChangePayload</span><span class="params">(<span class="keyword">int</span> oldItemPosition, <span class="keyword">int</span> newItemPosition)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//you can return particular field for changed item.</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getChangePayload(oldItemPosition, newItemPosition);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RecyclerViewAdapter 的更新方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateList</span><span class="params">(ArrayList&lt;Person&gt; newList)</span> </span>&#123;</span><br><span class="line">    DiffUtil.DiffResult diffResult = DiffUtil.calculateDiff(<span class="keyword">new</span> MyDiffCallback(<span class="keyword">this</span>.persons, newList));</span><br><span class="line">    diffResult.dispatchUpdatesTo(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以上。我们调用 dispactUpdatesTo(RecyclerView.Adapter) 方法，在 Adapter 中执行对应的更改。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://developer.android.com/reference/android/support/v7/util/DiffUtil.html" target="_blank" rel="noopener">https://developer.android.com/reference/android/support/v7/util/DiffUtil.html</a><br><a href="https://medium.com/@nullthemall/diffutil-is-a-must-797502bc1149#.x7kc55a69" target="_blank" rel="noopener">https://medium.com/@nullthemall/diffutil-is-a-must-797502bc1149#.x7kc55a69</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://medium.com/@iammert/using-diffutil-in-android-recyclerview-bdca8e4fbb00&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原文：Using DiffUtil in Android RecyclerView&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;使用 DiffUtil 从而避免使用 notifyDataSetChanged 更新 RecyclerView 中的数据&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://wliu6v.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>一些 Elasticsearch 知识点</title>
    <link href="http://wliu6v.github.io/elasticsearch-note/"/>
    <id>http://wliu6v.github.io/elasticsearch-note/</id>
    <published>2017-07-02T04:56:43.000Z</published>
    <updated>2017-08-17T06:09:20.645Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文面向的环境是 ElasticSearch 5 系列版本。列一些在应用中碰到的知识点以便于查阅</p></blockquote><a id="more"></a><h1 id="Elasticsearch-教程"><a href="#Elasticsearch-教程" class="headerlink" title="Elasticsearch 教程"></a>Elasticsearch 教程</h1><ul><li><a href="https://www.elastic.co/guide/en/elasticsearch/guide/current/index.html" target="_blank" rel="noopener">Elasticsearch: The Definitive Guide</a><ul><li>最主要的官方教程，从入门到各个知识点的概述都有。</li><li>在教程中有很多代码可以直接点击在 SENSE 中查看，但是最新版的 ES 已经没有 SENSE 插件了（而是直接整合进了 Kibana），因此需要先修改 SENSE 地址的指向才能正常工作。<br>  <code>http://localhost:5601/app/kibana#/dev_tools/console</code></li></ul></li><li><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/index.html" target="_blank" rel="noopener">Elasticsearch: 权威指南（上面那个的中文版）</a>  </li><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html" target="_blank" rel="noopener">Elasticsearch Reference</a><ul><li>看上去更为详细的教程，对每个 API 都有讲解，适合用来查阅而不是用来学习</li></ul></li></ul><h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><h2 id="如何查看分析器的工作方式"><a href="#如何查看分析器的工作方式" class="headerlink" title="如何查看分析器的工作方式"></a>如何查看分析器的工作方式</h2><p>Ref : <a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/analysis-intro.html" target="_blank" rel="noopener">Elasticsearch: 权威指南 » 基础入门 » 映射和分析 » 分析与分析器</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET /_analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;analyzer&quot;: &quot;standard&quot;,</span><br><span class="line">  &quot;text&quot;: &quot;Text to analyze&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="如何查看一个搜索的条件是否合法"><a href="#如何查看一个搜索的条件是否合法" class="headerlink" title="如何查看一个搜索的条件是否合法"></a>如何查看一个搜索的条件是否合法</h2><p>Ref : <a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/validating-queries.html" target="_blank" rel="noopener">Elasticsearch: 权威指南 » 基础入门 » 请求体查询 » 验证查询</a></p><p>使用 validate-query API 进行验证<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /gb/tweet/_validate/query?explain</span><br><span class="line">&#123;</span><br><span class="line">   &quot;query&quot;: &#123;</span><br><span class="line">      &quot;tweet&quot; : &#123;</span><br><span class="line">         &quot;match&quot; : &quot;really powerful&quot;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="如何同时对多个字段进行排序，如何对一个字段中的多个值进行排序"><a href="#如何同时对多个字段进行排序，如何对一个字段中的多个值进行排序" class="headerlink" title="如何同时对多个字段进行排序，如何对一个字段中的多个值进行排序"></a>如何同时对多个字段进行排序，如何对一个字段中的多个值进行排序</h2><p>Ref : <a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/_Sorting.html" target="_blank" rel="noopener">Elasticsearch: 权威指南 » 基础入门 » 排序与相关性 » 排序</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">GET /_search</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot; : &#123;</span><br><span class="line">        &quot;bool&quot; : &#123;</span><br><span class="line">            &quot;must&quot;:   &#123; &quot;match&quot;: &#123; &quot;tweet&quot;: &quot;manage text search&quot; &#125;&#125;,</span><br><span class="line">            &quot;filter&quot; : &#123; &quot;term&quot; : &#123; &quot;user_id&quot; : 2 &#125;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;sort&quot;: [</span><br><span class="line">        &#123; &quot;date&quot;:   &#123; &quot;order&quot;: &quot;desc&quot; &#125;&#125;,</span><br><span class="line">        &#123; &quot;_score&quot;: &#123; &quot;order&quot;: &quot;desc&quot; &#125;&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="如何将一个字段定义多种索引方式"><a href="#如何将一个字段定义多种索引方式" class="headerlink" title="如何将一个字段定义多种索引方式"></a>如何将一个字段定义多种索引方式</h2><p>Ref : <a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/multi-fields.html" target="_blank" rel="noopener">Elasticsearch: 权威指南 » 基础入门 » 排序与相关性 » 字符串排序与多字段</a></p><p>一个简单的方法是用两种方式对同一个字符串进行索引，这将在文档中包括两个字段： analyzed 用于搜索， not_analyzed 用于排序。</p><p>但是保存相同的字符串两次在 <code>_source</code> 字段是浪费空间的。 我们真正想要做的是传递一个 单字段 但是却用两种方式索引它。所有的 <code>_core_field</code> 类型 (strings, numbers, Booleans, dates) 接收一个 fields 参数。</p><p>该参数允许你转化一个简单的映射如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;tweet&quot;: &#123;</span><br><span class="line">    &quot;type&quot;:     &quot;string&quot;,</span><br><span class="line">    &quot;analyzer&quot;: &quot;english&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为一个多字段映射如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&quot;tweet&quot;: &#123; </span><br><span class="line">    &quot;type&quot;:     &quot;string&quot;,</span><br><span class="line">    &quot;analyzer&quot;: &quot;english&quot;,</span><br><span class="line">    &quot;fields&quot;: &#123;</span><br><span class="line">        &quot;raw&quot;: &#123; </span><br><span class="line">            &quot;type&quot;:  &quot;string&quot;,</span><br><span class="line">            &quot;index&quot;: &quot;not_analyzed&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="关于重建索引"><a href="#关于重建索引" class="headerlink" title="关于重建索引"></a>关于重建索引</h2><p><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/root-object.html" target="_blank" rel="noopener">https://www.elastic.co/guide/cn/elasticsearch/guide/current/root-object.html</a></p><p>Elasticsearch 会存储 _source 字段，因此当我们需要重建索引的时候，我们可以直接从 ES 如此做，而不需要从远程的数据库中重新获取。</p><p>重建索引时使用 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-reindex.html" target="_blank" rel="noopener">reindex API</a> 实现。该 API 只会重建所有的数据，但不会覆盖 setting。因此应该先创建新的 index 并调整好相关的设置，然后使用该 API 更新数据。 </p><p>需要注意的是，因为重建索引是将旧的索引放到新的不同的索引中，因此名字会发生变化。如果需要在运行中进行无缝切换，可以使用 <a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/index-aliases.html" target="_blank" rel="noopener">索引别名</a> 屏蔽掉背后的索引的变化。</p><p>索引别名的用法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PUT index2/_alias/index</span><br><span class="line">DELETE index2/_alias/index</span><br></pre></td></tr></table></figure></p><p>索引别名的命名对象<strong>不能</strong>是一个已经存在的索引。如上例，如果已经存在了一个 index 索引，那么该别名操作会失败。</p><p>通常如果要做到零停机的切换索引，会使用原子式的修改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">POST _aliases</span><br><span class="line">&#123;</span><br><span class="line">  &quot;actions&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;add&quot;: &#123;</span><br><span class="line">        &quot;index&quot;: &quot;index2&quot;,</span><br><span class="line">        &quot;alias&quot;: &quot;index&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,&#123;</span><br><span class="line">      &quot;remove&quot;: &#123;</span><br><span class="line">        &quot;index&quot;: &quot;index1&quot;,</span><br><span class="line">        &quot;alias&quot;: &quot;index&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="遇到新添加的字段时应抛出异常"><a href="#遇到新添加的字段时应抛出异常" class="headerlink" title="遇到新添加的字段时应抛出异常"></a>遇到新添加的字段时应抛出异常</h2><p>Ref : <a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/dynamic-mapping.html" target="_blank" rel="noopener">Elasticsearch: 权威指南 » 基础入门 » 索引管理 » 动态映射</a></p><p>Elasticsearch 会自动对新添加的字段进行分析并决定其类型，但是在大多数情况下这种做法都不是我们想要的。因此可以将新字段的处理方式改为严格模式，使其遇到新字段的时候直接抛出异常。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">PUT /my_index</span><br><span class="line">&#123;</span><br><span class="line">    &quot;mappings&quot;: &#123;</span><br><span class="line">        &quot;my_type&quot;: &#123;</span><br><span class="line">            &quot;dynamic&quot;:      &quot;strict&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="在搜索结果中返回分数的计算方式"><a href="#在搜索结果中返回分数的计算方式" class="headerlink" title="在搜索结果中返回分数的计算方式"></a>在搜索结果中返回分数的计算方式</h2><p>Ref : <a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/relevance-intro.html" target="_blank" rel="noopener">Elasticsearch: 权威指南 » 基础入门 » 排序与相关性 » 什么是相关性?</a></p><p>通过在任意搜索语句后面添加 explain 参数以输出每个分数计算的方式。</p><p>如果想查看某个文档为什么没有被搜索到，使用 /index/type/id/_explain 的方式进行调用。</p><h2 id="关于-inline-script"><a href="#关于-inline-script" class="headerlink" title="关于 inline script"></a>关于 inline script</h2><p>Ref : <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-scripting.html" target="_blank" rel="noopener">Elasticsearch Reference [5.5] » Modules » Scripting</a></p><p>Elasticsearch 支持在某些请求中添加 inline 字段以调用脚本。目前 Elasticsearch 主要的支持脚本语言是 painless 语言，语法与 Groovy 类似。</p><p>这里有 painless 的 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-scripting-painless-syntax.html" target="_blank" rel="noopener">基本语法文档</a> 和 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/painless-api-reference.html" target="_blank" rel="noopener">API 文档</a>。其中 API 文档大部分是来自于 Oracle 官网的 java8 doc</p><p>要注意 Elasticsearch 默认是关闭了 inline script 的。启用的话需要在配置文件中声明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">script.inline: true</span><br><span class="line"></span><br><span class="line"># 需要正则表达式的话就顺便添加这句</span><br><span class="line">script.painless.regex.enabled: true</span><br></pre></td></tr></table></figure><p>这里是一个 inline script 的应用场景</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">POST _reindex</span><br><span class="line">&#123;</span><br><span class="line">  &quot;source&quot;: &#123;</span><br><span class="line">    &quot;index&quot;: &quot;index1&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;dest&quot;: &#123;</span><br><span class="line">    &quot;index&quot;: &quot;index2&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;script&quot;: &#123;</span><br><span class="line">    &quot;inline&quot;: &quot;def str = ctx._source.param1; def p1 = /&lt;.*?&gt;/; def p2 = /\\[(img|url|code).*?\\].*?\\[\\/\\1\\]/im; def filtered = p1.matcher(str).replaceAll(&apos;&apos;); filtered = p2.matcher(filtered).replaceAll(&apos;&apos;); ctx._source.param1 = filtered; ctx_source.param2 = str&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注意配置-Elasticsearch-的-Java-Heap-Memory-Size"><a href="#注意配置-Elasticsearch-的-Java-Heap-Memory-Size" class="headerlink" title="注意配置 Elasticsearch 的 Java Heap Memory Size"></a>注意配置 Elasticsearch 的 Java Heap Memory Size</h2><p>Ref : <a href="https://www.elastic.co/guide/en/elasticsearch/guide/current/heap-sizing.html" target="_blank" rel="noopener">Elasticsearch: The Definitive Guide [2.x] » Administration, Monitoring, and Deployment » Production Deployment » Heap: Sizing and Swapping</a></p><blockquote><p>血的教训。。。一开始忘了配置了，跑了两个星期之后就 OOM 挂了。</p></blockquote><p>ES 默认的 Heap 为 1G，通常我们需要将其改的大一些，有两种方式：</p><ul><li>在环境变量中 <code>export ES_JAVA_OPTS=&quot;-Xms31g -Xmx31g&quot;</code></li><li>在启动 es 时 <code>ES_JAVA_OPTS=&quot;-Xms31g -Xmx31g&quot; ./bin/elasticsearch</code></li></ul><p>要注意 Xms 和 Xmx 值要相同，避免发生 java heap resize 消耗性能。</p><p>以及官方教程中提到一个 <code>ES_HEAP_SIZE</code> 的变量，但是实测在 5.4.0 版本中已经被禁用，提示说最好是用 <code>ES_JAVA_OPTS</code> 进行设置。</p><h3 id="如何配置最合适的内存大小"><a href="#如何配置最合适的内存大小" class="headerlink" title="如何配置最合适的内存大小"></a>如何配置最合适的内存大小</h3><ol><li>分配的内存最大不要超过 50%，因为 Lucene 也需要使用内存（off-heap）</li><li>不要超过 32G。因为 HotSpot JVM 的一个 compress object pointers 技术。这里看不懂，参考下面 Ref 内容。基本上就是大于 32G 内存的时候，Java 的对象指针本身会变大，导致占用更多的空间，因此内存要达到 40-50G 的时候才能使性能与 32G 时候持平。因此尽量让 Java 堆内存保持在 32G 以下比较好</li><li>简单考虑的话可以设置为 31G。（假设机器内存为 64G ）</li></ol><h2 id="通过-Reroute-命令重新分配-unassigned-节点"><a href="#通过-Reroute-命令重新分配-unassigned-节点" class="headerlink" title="通过 Reroute 命令重新分配 unassigned 节点"></a>通过 Reroute 命令重新分配 unassigned 节点</h2><p>Ref : <a href="https://www.elastic.co/guide/en/elasticsearch/reference/5.5/cluster-reroute.html" target="_blank" rel="noopener">Elasticsearch Reference [5.5] » Cluster APIs » Cluster Reroute</a></p><p>reroute 命令允许在包含特定命令的情况下对集群进行重新路由分配命令。通过这个命令我们可以将一个未分配的分片分配到一个特定的节点上。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">POST /_cluster/reroute</span><br><span class="line">&#123;</span><br><span class="line">    &quot;commands&quot; : [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;move&quot; : &#123;</span><br><span class="line">                &quot;index&quot; : &quot;test&quot;, </span><br><span class="line">&quot;shard&quot; : 0,</span><br><span class="line">                &quot;from_node&quot; : &quot;node1&quot;, </span><br><span class="line">&quot;to_node&quot; : &quot;node2&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;allocate_replica&quot; : &#123;</span><br><span class="line">                &quot;index&quot; : &quot;test&quot;, </span><br><span class="line">&quot;shard&quot; : 1,</span><br><span class="line">                &quot;node&quot; : &quot;node3&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意，一旦重新分配，集群将会自动将状态平衡到均匀状态。比如说，如果将一个分片从 node1 移动到 node2，那么 es 为了保持均匀状态，会自动的将另一个分片从 node2 移到 node1。</p><p>可以将集群设置为禁止分配（disable allocations），那么就只能执行显示分配。</p><p>当时使用 reroute 命令是为了解决这样的问题：某个 node 挂了之后，上面的 shard 变成 Unassigned 状态了。等该 node 重新启动之后，shard 不知道为什么一直无法从 Unassigned 重新移到该 node 上，因此需要使用 allocate_replica 命令进行 reroute，手动将其移过去。猜测可能是 node 挂了之后，产生了一些 lock 文件阻碍了自动的 allocate，正确方式大概是删掉那些 lock 文件然后就可以自动 allocate 了。不过看上去手动执行 reroute 也可以达到效果。</p><p><a href="mailto:Updated@17.08.17" target="_blank" rel="noopener">Updated@17.08.17</a> : 当 shard 过大的时候，重新分配之后往往会是 yellow 状态。通过 <code>GET _cat/shards</code> 命令可以查看当前各个 shard 的状态，如果能看到其状态是 INITIALIZING 且可预知其 size 很大的话，是需要等待很长时间的。我碰到这个问题的时候，是一个 300+G 的索引，每个 shard 上有 60G 上下的内容，启动了四个多小时。可想而知这个启动时间跟机器性能也有关系。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文面向的环境是 ElasticSearch 5 系列版本。列一些在应用中碰到的知识点以便于查阅&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="elasticsearch" scheme="http://wliu6v.github.io/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>升级到 AndroidStudio 3.0 Canary 之后新建 Kotlin 项目无法编译的问题</title>
    <link href="http://wliu6v.github.io/Can-not-sync-gradle-for-kotlin-project/"/>
    <id>http://wliu6v.github.io/Can-not-sync-gradle-for-kotlin-project/</id>
    <published>2017-05-30T08:49:10.000Z</published>
    <updated>2017-05-30T09:19:46.561Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>需要确认 kotlin_version 是否最新</p></blockquote><a id="more"></a><hr><p>AndroidStudio 最近在 Canary 频道更新了 3.0 版本，其中加入了 Kotlin 的支持，于是就不需要安装 Kotlin 插件了。但是我使用 AndroidStudio 3.0 创建了新的项目并勾选了 Kotlin 的支持之后，gradle 会在 sync 时失败。错误信息如下：</p><blockquote><p>Error:Unable to find method ‘com.android.build.gradle.internal.variant.BaseVariantData.getOutputs()Ljava/util/List;’.<br>Possible causes for this unexpected error include:<ul><li>Gradle’s dependency cache may be corrupt (this sometimes occurs after a network connection timeout.)<br><a href="syncProject">Re-download dependencies and sync project (requires network)</a></li><li>The state of a Gradle build process (daemon) may be corrupt. Stopping all Gradle daemons may solve this problem.<br><a href="stopGradleDaemons">Stop Gradle build processes (requires restart)</a></li><li>Your project may be using a third-party plugin which is not compatible with the other plugins in the project or the version of Gradle requested by the project.</li></ul>In the case of corrupt Gradle processes, you can also try closing the IDE and then killing all Java processes.</p></blockquote><p>经过很多尝试之后，最终将 root project 的 build.gradle 文件中的 <code>ext.kotlin_version</code> 值从 1.1.2-3 改为了 1.1.2-4 之后解决。</p><p>这应该会是篇时效性强的文章。之后再碰到同样的问题的话需要自行确认 Kotlin 插件的最新版本并尝试替换。</p><p>其他尝试过的方案有：</p><ul><li>升级 jdk 至最新版本（1.8.0_131）并更新环境变量</li><li>将 app 的 build.gradle 中的<br>  <code>compile &quot;org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version&quot;</code><br>  替换为<br>  <code>compile &quot;org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version&quot;</code><br>  （移除 <code>-jre7</code>）  </li><li>确认 AndroidStudio Setting 中的 Gradle 使用的是 default gradle wrapper 而不是自定义的</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;需要确认 kotlin_version 是否最新&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://wliu6v.github.io/tags/Android/"/>
    
      <category term="Kotlin" scheme="http://wliu6v.github.io/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>为 Android 应用添加 RTL 语言支持</title>
    <link href="http://wliu6v.github.io/Android-RTL-Support/"/>
    <id>http://wliu6v.github.io/Android-RTL-Support/</id>
    <published>2017-02-25T05:41:18.000Z</published>
    <updated>2017-10-19T12:32:09.956Z</updated>
    
    <content type="html"><![CDATA[<p>对于一款面向全球用户的 Android 应用来说，进行本地化处理是十分重要的。关于本地化涉及的全部内容，可以参考 <a href="https://developer.android.com/distribute/tools/localization-checklist.html" target="_blank" rel="noopener">Google Developer - Localization Checklist</a> 。这里只介绍 RTL 布局中涉及的部分内容。</p><h2 id="什么是-RTL-布局"><a href="#什么是-RTL-布局" class="headerlink" title="什么是 RTL 布局"></a>什么是 RTL 布局</h2><p>我们平常都是以从左到右（Left-to-Right，LTR）的方向显示文本，但是对于阿拉伯语、希伯来语等语言，他们的文字是从右向左排列的，称为 Right-to-Left 布局，简称为 RTL。当我们处理 RTL 语言的时候，需要特别注意的一点是：在 RTL 语言中，并非仅有文本框的内容需要从右到左排列，而是整个页面的内容都要镜像过来，才符合 RTL 用户的使用习惯。</p><a id="more"></a><p>我们可以从 iOS 10 的介绍页面上比较一下 RTL 和 LTR 布局的区别。除了所有的文本框从右到左之外，包括状态栏、Tab bar 在内的所有内容都是反向的，甚至有部分能够表达方向含义的图标，如电量和返回键的图标也是反着的。</p><p><img src="/img/RTL-Support-iOS-ar-vs-cn.png" alt="阿拉伯语与中文的 iOS 10 介绍页面"></p><p><em>从这两幅图中容易看出 RTL 布局与 LTR 布局在大多数元素上都是镜像的效果。</em></p><h2 id="Android-对-RTL-布局的支持情况"><a href="#Android-对-RTL-布局的支持情况" class="headerlink" title="Android 对 RTL 布局的支持情况"></a>Android 对 RTL 布局的支持情况</h2><p>Android 系统从 4.2 开始引入了对双向文本的完整支持，如果应用支持的 minSdkVersion &gt;= 17 ，则可以很轻易的实现 RTL 效果。由于本人并没有特地为 4.1 及以下设备调试过 RTL 的支持，因此以下内容主要以 4.2 版本进行讲述。</p><h2 id="如何实现-RTL-布局"><a href="#如何实现-RTL-布局" class="headerlink" title="如何实现 RTL 布局"></a>如何实现 RTL 布局</h2><p>实现 RTL 布局的核心思想，就是将所有 Left / Right 这种绝对方向换为 Start / End 这种相对方向。</p><p>注：以下内容主要是以 <code>minSdkVersion = 17</code> 的情况下进行描述，并且是以 “为一个现有应用添加 RTL 支持” 的视角进行描述的。新创建应用的话当然亦可参考，但对于 <code>minSdkVersion &lt; 17</code> 的情况就需要注意了，许多地方要根据设备的系统版本进行额外判断。</p><h3 id="1-在-AndroidManifest-xml-标明-supportsRtl-quot-true-quot"><a href="#1-在-AndroidManifest-xml-标明-supportsRtl-quot-true-quot" class="headerlink" title="1. 在 AndroidManifest.xml 标明 supportsRtl=&quot;true&quot;"></a>1. 在 AndroidManifest.xml 标明 <code>supportsRtl=&quot;true&quot;</code></h3><p>首先在 AndroidManifest.xml 文件中的 application 节点内添加 <code>android:supportsRtl=&quot;true&quot;</code> ，向系统声明当前应用能够支持 RTL 布局，这样当系统语言修改为阿拉伯语等从右到左布局时，应用的布局内容会随之发生改变。</p><h3 id="2-在-layout-文件中出现的所有-left-right-属性替换为-start-end"><a href="#2-在-layout-文件中出现的所有-left-right-属性替换为-start-end" class="headerlink" title="2. 在 layout 文件中出现的所有 left / right 属性替换为 start / end"></a>2. 在 layout 文件中出现的所有 left / right 属性替换为 start / end</h3><p>包括但不限于 marginLeft / paddingLeft / alignLeftOf 等内容。通过 Android Studio 的重构功能可以简单的完成这一步骤，如下图：</p><p><img src="/img/RTL-Support-refactorInAs.png" alt="利用 Android Studio 的重构功能实现 RTL Support"></p><h3 id="3-需要将代码中包含绝对方向设置的代码改为相对方向"><a href="#3-需要将代码中包含绝对方向设置的代码改为相对方向" class="headerlink" title="3. 需要将代码中包含绝对方向设置的代码改为相对方向"></a>3. 需要将代码中包含绝对方向设置的代码改为相对方向</h3><p>思路跟 layout 中的修改一样。Android Studio 的重构功能似乎只能影响 layout 文件，不能处理代码中的这种内容。因此我们需要手动进行修改，需要注意以下几方面</p><ul><li>需要将 setMargins(left, top, right, bottom) 方法改为 setMarginStart(), setMarginEnd() 等方法。（这里很奇怪的是，从 SDK 的源码中可以看到，ViewGroup.MaringLayoutParam 类中提供了 setMarginsRelative 方法并设置了 hide 标注，不知道为什么不公开出来）</li><li>TextView 的 setCompoundDrawableXXX 系列方法统一改为 setCompoundDrawableRelativeXXX 系列方法</li><li>其他内容大多可以通过代码全文搜索 LEFT 以及 RIGHT 字符串之后再单独处理</li></ul><h3 id="4-部分资源需要提供-rtl-版本"><a href="#4-部分资源需要提供-rtl-版本" class="headerlink" title="4. 部分资源需要提供 rtl 版本"></a>4. 部分资源需要提供 rtl 版本</h3><p>如果有表示方向作用的图片资源，需要创建 -ldrtl 后缀的响应文件夹，并将提供的资源放到里面。至于有哪些图片需要修改，最典型的是返回箭头。</p><h3 id="5-将原生-ViewPager-替换为支持-RTL-布局的第三方-ViewPager"><a href="#5-将原生-ViewPager-替换为支持-RTL-布局的第三方-ViewPager" class="headerlink" title="5. 将原生 ViewPager 替换为支持 RTL 布局的第三方 ViewPager"></a>5. 将原生 ViewPager 替换为支持 RTL 布局的第三方 ViewPager</h3><p>系统原生 ViewPager 有个经典 bug：在 RTL 布局中，其操作手势与滑动效果是反向的。</p><p>比如我们先考虑 LTR 布局的三个页面： 1-2-3 ，在 RTL 布局中应该变为 3-2-1。通常当我们处于第 2 个页面的时候，手指从屏幕右侧往左滑动，页面会进入右侧的页面，也就是 LTR 的 3 号页面或 RTL 的 1 号页面。而因为系统原生 ViewPager 的 Bug，导致 RTL 布局中，手指向左滑动时页面也左滑，效果就很怪异。相关的讨论可以参照 <a href="https://code.google.com/p/android/issues/detail?id=56831" target="_blank" rel="noopener">Android Issue</a> 中的讨论，这个问题在 2013 年就被提出来过，但一直没有得到有效地修复。</p><p>我们可以通过用第三方的 ViewPager 控件替换掉系统 ViewPgaer 的方式修复掉此问题。目前我在使用的库来自 <a href="https://github.com/ksloginov/RtlViewPager" target="_blank" rel="noopener">https://github.com/ksloginov/RtlViewPager</a> ，使用方式足够简单且有效，能够与 TabLayout 相结合。</p><h3 id="6-考察-TextView-的宽度能否用-wrap-content-替换-match-parent"><a href="#6-考察-TextView-的宽度能否用-wrap-content-替换-match-parent" class="headerlink" title="6. 考察 TextView 的宽度能否用 wrap_content 替换 match_parent"></a>6. 考察 TextView 的宽度能否用 wrap_content 替换 match_parent</h3><p>系统提供的 TextView 在显示文字时是原生支持 RTL 布局的，也就是说，即使上面的内容都未实现，只是放两个全屏的 TextView，分别显示 LTR 语言文字和 RTL 语言文字，其显示方向也是不同的。反过来考虑，即使上面的内容都实现了，TextView 也是要单独考察的控件。为什么在系统对 TextView 的 RTL 拥有原生支持情况下仍然要对其特别关注呢？</p><p>因为即使在 RTL 语言中，也不能保证不出现 LTR 语言内容。我们考虑这样的情况：有两个 TextView，都设置了 <code>layout_width=&quot;match_parent&quot;</code> 属性，且其中的文字内容都足够短，不能撑满屏幕。那么当这两个 TextView 一个显示 LTR 语言，一个显示 RTL 语言时，会是什么效果呢？</p><p>答案如下图左方所示，LTR 语言会在文本框中居左显示，RTL 则居右，导致内容一左一右，非常难看。而将 width 改为 wrap_content 后则会如下右图样式，尽管控件内的文字显示顺序遵循了 LTR，但控件本身仍然会受到系统整体 RTL 的控制贴紧右侧。</p><p><img src="/img/RTL-Support-textview-width.png" alt="TextView 的 layout_width 属性会在 LTR 与 RTL 混排情况下影响显示"></p><p>至于如何在应用内找到使用了 match_parent 作为宽度属性的 TextView，我们可以通过 Android Studio 的 find in path 功能进行查找。通过构造正则表达式，将其全部列举出来并不难。问题在于不能全局统一的进行替换，而是要每个地方单独考察并尝试替换。如果页面需求的确需要 match_parent 作为宽度那也就没办法了。</p><p>我在 find in path 时候使用的表达式，不一定准确： <code>&lt;TextView[^&gt;]*?android:layout_width=&quot;(match_parent|fill_parent)&quot;[^&gt;]*?/&gt;</code> 。 需要反选 Case sensitive，勾选 Regular expression，上下文为 anywhere。</p><hr><h2 id="参考内容"><a href="#参考内容" class="headerlink" title="参考内容"></a>参考内容</h2><p>同文中链接内容</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于一款面向全球用户的 Android 应用来说，进行本地化处理是十分重要的。关于本地化涉及的全部内容，可以参考 &lt;a href=&quot;https://developer.android.com/distribute/tools/localization-checklist.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Google Developer - Localization Checklist&lt;/a&gt; 。这里只介绍 RTL 布局中涉及的部分内容。&lt;/p&gt;
&lt;h2 id=&quot;什么是-RTL-布局&quot;&gt;&lt;a href=&quot;#什么是-RTL-布局&quot; class=&quot;headerlink&quot; title=&quot;什么是 RTL 布局&quot;&gt;&lt;/a&gt;什么是 RTL 布局&lt;/h2&gt;&lt;p&gt;我们平常都是以从左到右（Left-to-Right，LTR）的方向显示文本，但是对于阿拉伯语、希伯来语等语言，他们的文字是从右向左排列的，称为 Right-to-Left 布局，简称为 RTL。当我们处理 RTL 语言的时候，需要特别注意的一点是：在 RTL 语言中，并非仅有文本框的内容需要从右到左排列，而是整个页面的内容都要镜像过来，才符合 RTL 用户的使用习惯。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://wliu6v.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>如何为 DFP Ads 自动添加 Test Device Id</title>
    <link href="http://wliu6v.github.io/How-to-Add-Test-Device-Id-for-DFP-Ads/"/>
    <id>http://wliu6v.github.io/How-to-Add-Test-Device-Id-for-DFP-Ads/</id>
    <published>2016-06-25T02:45:04.000Z</published>
    <updated>2017-02-25T05:42:14.285Z</updated>
    
    <content type="html"><![CDATA[<p>在使用 DFP Ads 的时候，官方文档中会要求开发人员在测试广告的过程中必须使用测试广告 ID，并需要将测试的设备在代码中添加为测试设备才可以正常使用。但添加的过程有些麻烦：我们需要将测试设备连接至电脑，启动应用拉取广告，同时观察 logcat 中的日志，抓取到形如 <code>... addTestDevice(&quot;123456789ABCDEF0123456789ABCDEF0&quot;) ...</code> 的 log 后，将其中的 Device Id 写到代码中并重新编译才可以。如果测试设备很多，就要对每个设备都抓一遍 log，比较繁琐。因此希望能够在代码中自动抓取 DFP Ads 输出的 log，提取出 Test Device Id，并添加到代码中。这样就可以做到每个新的设备都可以在拉取一次广告后将自身加为测试设备了。</p><p>实现基本如下：</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">private void loadAd() &#123;</span><br><span class="line">PublisherAdView adView = (PublisherAdView) findViewById(R.id.ad_view);</span><br><span class="line">PublisherAdRequest.Builder adBuilder = new PublisherAdRequest.Builder();</span><br><span class="line">adView.loadAd(adBuilder.build());</span><br><span class="line">saveTestDevice();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private void addTestDevice(PublisherAdRequest.Builder builder) &#123;</span><br><span class="line">String testDeviceId = PreferenceManager.getDefaultSharedPreferences(context).getString(</span><br><span class="line">&quot;AD_TEST_DEVICE_ID&quot;, &quot;&quot;);</span><br><span class="line">if (!TextUtils.isEmpty(testDeviceId)) &#123;</span><br><span class="line">builder.addTestDevice(testDeviceId);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private void saveTestDevice() &#123;</span><br><span class="line">try &#123;</span><br><span class="line"></span><br><span class="line">ArrayList&lt;String&gt; loadLogCommand = new ArrayList();</span><br><span class="line">loadLogCommand.add(&quot;logcat&quot;);       // 调用 logcat 命令</span><br><span class="line">loadLogCommand.add(&quot;-d&quot;);           // 将命令的输出内容直接输出到屏幕上</span><br><span class="line">loadLogCommand.add(&quot;|&quot;);            // | grep &quot;Ads&quot; 用来过滤输出的结果，仅需要观察 Ads 相关的 log</span><br><span class="line">loadLogCommand.add(&quot;grep&quot;);</span><br><span class="line">loadLogCommand.add(&quot;\&quot;Ads\&quot;&quot;);</span><br><span class="line"></span><br><span class="line">Process process = Runtime.getRuntime().exec(</span><br><span class="line">loadLogCommand.toArray(new String[logLogCommand.size()]));</span><br><span class="line">BufferedReader bufferedReader = new BufferedReader(</span><br><span class="line">new InputStreamReader( process.getInputStream()), 1024 );</span><br><span class="line">String line;</span><br><span class="line">while ((line = bufferedReader.readLine()) != null) &#123;</span><br><span class="line">if (line.contains(&quot;addTestDevice&quot;)) &#123;</span><br><span class="line">int index = line.indexOf(&quot;(\&quot;&quot;) + 2;</span><br><span class="line">String testDeviceId = line.substring(index, index + 32);</span><br><span class="line">if (!TextUtils.isEmpty(testDeviceId)) &#123;</span><br><span class="line">PreferenceManager.getDefaultSharedPreferences(context).edit().putString(</span><br><span class="line">&quot;AD_TEST_DEVICE_ID&quot;, testDeviceId).apply();</span><br><span class="line">&#125;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Arraylist&lt;String&gt; clearLogCommand = new ArrayList();</span><br><span class="line">clearLogCommand.add(&quot;logcat&quot;);      // 清空 logcat 输出内容</span><br><span class="line">clearLogCommand.add(&quot;-c&quot;);</span><br><span class="line">Runtime.getRuntime().exec(clearLogCommand.toArray(new String[clearLogCommand.size()]));</span><br><span class="line"></span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h3><ul><li>一些网上的教程说需要添加 READ_LOGS 的 permission 以获取读取日志的权限。但实际上，如果只是获取当前应用所生成的 log，似乎并不需要此权限。（况且读其他应用的日志，在 4.1 以上的 Android 系统中也需要 root 才能实现）</li><li>clearLog 那个命令，据说如果不清理日志的话，任何操作都将产生新的日志并导致代码进入死循环。。不过实际上也没有出现，我猜测是如果要在 while 语句中输出 log 的话需要调用此命令，否则无所谓。</li></ul><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="http://www.cnblogs.com/mataojin/archive/2011/11/07/2239260.html" target="_blank" rel="noopener">博客园 - 马涛 - 如何获取 android 的系统日志 logcat</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在使用 DFP Ads 的时候，官方文档中会要求开发人员在测试广告的过程中必须使用测试广告 ID，并需要将测试的设备在代码中添加为测试设备才可以正常使用。但添加的过程有些麻烦：我们需要将测试设备连接至电脑，启动应用拉取广告，同时观察 logcat 中的日志，抓取到形如 &lt;code&gt;... addTestDevice(&amp;quot;123456789ABCDEF0123456789ABCDEF0&amp;quot;) ...&lt;/code&gt; 的 log 后，将其中的 Device Id 写到代码中并重新编译才可以。如果测试设备很多，就要对每个设备都抓一遍 log，比较繁琐。因此希望能够在代码中自动抓取 DFP Ads 输出的 log，提取出 Test Device Id，并添加到代码中。这样就可以做到每个新的设备都可以在拉取一次广告后将自身加为测试设备了。&lt;/p&gt;
&lt;p&gt;实现基本如下：&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://wliu6v.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>一个神奇的 Bug：在 Win10 中使用 MacType 导致 Git rebase 命令出现问题</title>
    <link href="http://wliu6v.github.io/A-bug-when-use-MacType-in-Win10/"/>
    <id>http://wliu6v.github.io/A-bug-when-use-MacType-in-Win10/</id>
    <published>2016-05-22T08:22:10.000Z</published>
    <updated>2016-05-22T08:51:30.404Z</updated>
    
    <content type="html"><![CDATA[<p>之前换了浏览器，然后突然想试试看 MacType 。查了一下发现 MacType 并不支持 Win10，但它没有说为什么不支持，我就强行装了一个用了用。刚开始用的时候感觉还行，虽然碰到一些权限问题，但基本上能用。结果用着用着突然发现我的 Git 无法正常的执行 rebase 操作了。比如，在 b 分支上执行 git rebase a，结果实际效果却似乎是在 b 上执行了 git rebase origin/b。而且 rebase 过程中碰到了冲突之后会卡主，即使冲突解决了也无法 git rebase –continue，甚至连 git rebase –abort 也不行。命令行会一直卡在 rebase 的过程状态。</p><p>刚碰到这个问题的时候我查了很久也没找到解决方案，而且除了 git 命令行之外，我还尝试了在 git gui 中与 source tree 中使用 rebase 功能，效果都一样。最后想破了头想到，这个问题好像是启用了 MacType 之后才引起的。卸载 MacType 并重启之后，git rebase 就正常了。</p><a id="more"></a><p>感觉这问题简直是坑啊。。。 太莫名其妙了。也许跟我 MacType 的管理员权限设置也有一定关系，不知道其他人在 Win10 下用 MacType 的时候有没有遇到同类问题，有的话一定告诉我。</p><p>顺便写一下卡在 rebase 的过程是如何解决的：首先确认当前的代码状态是正常的（防止丢代码啊），然后移除 <code>.git/rebase-merge</code> 或者 <code>.git/rebase-apply</code> 即可。处于冲突状态的文件可以直接 reset 掉。ref ： <a href="http://stackoverflow.com/questions/3685001/git-how-to-fix-corrupted-interactive-rebase" target="_blank" rel="noopener">http://stackoverflow.com/questions/3685001/git-how-to-fix-corrupted-interactive-rebase</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前换了浏览器，然后突然想试试看 MacType 。查了一下发现 MacType 并不支持 Win10，但它没有说为什么不支持，我就强行装了一个用了用。刚开始用的时候感觉还行，虽然碰到一些权限问题，但基本上能用。结果用着用着突然发现我的 Git 无法正常的执行 rebase 操作了。比如，在 b 分支上执行 git rebase a，结果实际效果却似乎是在 b 上执行了 git rebase origin/b。而且 rebase 过程中碰到了冲突之后会卡主，即使冲突解决了也无法 git rebase –continue，甚至连 git rebase –abort 也不行。命令行会一直卡在 rebase 的过程状态。&lt;/p&gt;
&lt;p&gt;刚碰到这个问题的时候我查了很久也没找到解决方案，而且除了 git 命令行之外，我还尝试了在 git gui 中与 source tree 中使用 rebase 功能，效果都一样。最后想破了头想到，这个问题好像是启用了 MacType 之后才引起的。卸载 MacType 并重启之后，git rebase 就正常了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Git" scheme="http://wliu6v.github.io/tags/Git/"/>
    
      <category term="Windows" scheme="http://wliu6v.github.io/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>Multi-Flavor in Android Studio</title>
    <link href="http://wliu6v.github.io/Multi-Flavor-in-Android-Studio/"/>
    <id>http://wliu6v.github.io/Multi-Flavor-in-Android-Studio/</id>
    <published>2016-05-22T07:34:41.000Z</published>
    <updated>2016-07-06T06:10:47.804Z</updated>
    
    <content type="html"><![CDATA[<h2 id="如何为多个-Flavor-配置不同权限"><a href="#如何为多个-Flavor-配置不同权限" class="headerlink" title="如何为多个 Flavor 配置不同权限"></a>如何为多个 Flavor 配置不同权限</h2><p>Multi-Flavor 的一个重要功能是针对于不同的 Flavor 加载不同的代码。通过此功能，我们可以实现为多个 Flavor 配置不同应用权限的效果。</p><p>具体方式可参考这篇文章：<a href="https://futurestud.io/blog/how-to-implement-product-flavor-dependent-permissions" target="_blank" rel="noopener">Android: How to Implement ProductFlavor-Dependent Permissions with Gradle</a> .</p><p>通过这种方式，我们可以将所有 Flavor 共有的部分放在默认的 AndroidManifest 文件中，然后针对不同的 Flavor 再实现各自额外的内容。在编译对应 Flavor 的时候，其各自的 AndroidManifest 文件会跟默认的 AndroidManifest 文件合并，相同节点的内容会合并到一起。非常方便。</p><a id="more"></a><p>但是上述教程的代码结构是针对于 Android Studio 的代码结构的。如果是 Eclipse 结构的代码，我们需要将目录结构调整为如下所示：</p><pre><code>module     - AndroidManifest.xml    - src    - res    - flavor1        └ AndroidManifest.xml     - flavor2        └ AndroidManifest.xml</code></pre><p>然后还要在 build.gradle 中添加 sourceSets 字段：</p><pre><code>sourceSets {    main {        manifest.srcFile &apos;AndroidManifest.xml&apos;        java.srcDirs = [&apos;src&apos;]        resources.srcDirs = [&apos;src&apos;]        aidl.srcDirs = [&apos;src&apos;]        renderscript.srcDirs = [&apos;src&apos;]        res.srcDirs = [&apos;res&apos;]        assets.srcDirs = [&apos;assets&apos;]    }    flavor1Flavor {        manifest.srcFile &apos;flavor1/AndroidManifest.xml&apos;    }    flavor2Flavor {        manifest.srcFile &apos;flavor2/AndroidManifest.xml&apos;        java.srcDirs = [&apos;flavor2/src&apos;]    }    // Move the tests to tests/java, tests/res, etc...    instrumentTest.setRoot(&apos;tests&apos;)    debug.setRoot(&apos;build-types/debug&apos;)    release.setRoot(&apos;build-types/release&apos;)}</code></pre><h2 id="如何为多个-Flavor-配置不同的-url-scheme"><a href="#如何为多个-Flavor-配置不同的-url-scheme" class="headerlink" title="如何为多个 Flavor 配置不同的 url-scheme"></a>如何为多个 Flavor 配置不同的 url-scheme</h2><p>原理跟上面一样，只要在各自的 AndroidManifest 写上不同的 url-scheme 即可。基本思路如下：</p><h3 id="1-默认-AndroidManifest-xml"><a href="#1-默认-AndroidManifest-xml" class="headerlink" title="1. 默认 AndroidManifest.xml"></a>1. 默认 AndroidManifest.xml</h3><pre><code>&lt;manifest&gt;    &lt;uses-permission /&gt;    &lt;application&gt;        &lt;activity&gt;            &lt;intent-filter&gt; intent 1 &lt;/intent-filter&gt;        &lt;/activity&gt;    &lt;/application&gt;&lt;/manifest&gt;</code></pre><h3 id="2-Flavor1-AndroidManifest-xml"><a href="#2-Flavor1-AndroidManifest-xml" class="headerlink" title="2. Flavor1/AndroidManifest.xml"></a>2. Flavor1/AndroidManifest.xml</h3><pre><code>&lt;manifest&gt;    &lt;uses-permission /&gt;    &lt;application&gt;        &lt;activity&gt;            &lt;intent-filter&gt; intent 2 &lt;/intent-filter&gt;        &lt;/activity&gt;    &lt;/application&gt;&lt;/manifest&gt;</code></pre><h3 id="3-Flavor2-AndroidManifest-xml"><a href="#3-Flavor2-AndroidManifest-xml" class="headerlink" title="3. Flavor2/AndroidManifest.xml"></a>3. Flavor2/AndroidManifest.xml</h3><pre><code>&lt;manifest&gt;    &lt;uses-permission /&gt;    &lt;application&gt;        &lt;activity&gt;            &lt;intent-filter&gt; intent 3 &lt;/intent-filter&gt;            &lt;intent-filter&gt; intent 4 &lt;/intent-filter&gt;            &lt;intent-filter&gt; intent 5 &lt;/intent-filter&gt;            &lt;intent-filter&gt; intent 6 &lt;/intent-filter&gt;        &lt;/activity&gt;    &lt;/application&gt;&lt;/manifest&gt;</code></pre><h2 id="如何切换当前编译的-Flavor"><a href="#如何切换当前编译的-Flavor" class="headerlink" title="如何切换当前编译的 Flavor"></a>如何切换当前编译的 Flavor</h2><p>在 Android Studio 的 Menu 中找到 View -&gt; Tool Windows -&gt; Build Variants， 然后将对应 Module 的 BuildVariant 进行修改即可。对于每个 Flavor，都会生成 Debug 和 Release 两种编译方式。选择时需注意。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;如何为多个-Flavor-配置不同权限&quot;&gt;&lt;a href=&quot;#如何为多个-Flavor-配置不同权限&quot; class=&quot;headerlink&quot; title=&quot;如何为多个 Flavor 配置不同权限&quot;&gt;&lt;/a&gt;如何为多个 Flavor 配置不同权限&lt;/h2&gt;&lt;p&gt;Multi-Flavor 的一个重要功能是针对于不同的 Flavor 加载不同的代码。通过此功能，我们可以实现为多个 Flavor 配置不同应用权限的效果。&lt;/p&gt;
&lt;p&gt;具体方式可参考这篇文章：&lt;a href=&quot;https://futurestud.io/blog/how-to-implement-product-flavor-dependent-permissions&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Android: How to Implement ProductFlavor-Dependent Permissions with Gradle&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;通过这种方式，我们可以将所有 Flavor 共有的部分放在默认的 AndroidManifest 文件中，然后针对不同的 Flavor 再实现各自额外的内容。在编译对应 Flavor 的时候，其各自的 AndroidManifest 文件会跟默认的 AndroidManifest 文件合并，相同节点的内容会合并到一起。非常方便。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://wliu6v.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Add stetho in Android Apps</title>
    <link href="http://wliu6v.github.io/Add-stetho-in-Android-Apps/"/>
    <id>http://wliu6v.github.io/Add-stetho-in-Android-Apps/</id>
    <published>2016-05-20T10:01:59.000Z</published>
    <updated>2016-05-24T03:40:57.819Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://facebook.github.io/stetho/" target="_blank" rel="noopener">Stetho</a> 是 Facebook 提供的一个面向 Android App 的调试工具。在配置好 Stetho 之后，我们可以在 Chrome 中对特定应用进行调试，功能包括：查看数据库与 SharedPerferences、查看网络请求、查看当前视图布局（hierarchy view）等等，甚至可以通过 JavaScript 调用 Android App 中的部分命令。</p><a id="more"></a><h2 id="如何集成"><a href="#如何集成" class="headerlink" title="如何集成"></a>如何集成</h2><p>可以参照 <a href="http://facebook.github.io/stetho/" target="_blank" rel="noopener">Stetho 官方网页</a>。<br>步骤基本上就两三步：</p><ol><li>在 build.gradle 添加 stetho 的依赖。</li><li>在 Application 初始化的时候添加 stetho 的初始化代码。</li></ol><p>这两步完成之后可以实现除抓包之外的大部分功能。<br>要实现抓包，需要根据使用的网络请求库进行特定的配置。比如用的如果是 OkHttp 的话，就需要添加 stetho-okhttp 的依赖，并且在初始化 OkHttp 的时候添加对 Stetho 的 Interceptor。</p><p>具体的步骤可以参照其他人的教程：</p><p><a href="http://stormzhang.com/android/2015/03/05/android-debug-use-chrome/" target="_blank" rel="noopener">http://stormzhang.com/android/2015/03/05/android-debug-use-chrome/</a><br><a href="http://blog.csdn.net/sbsujjbcy/article/details/45420475" target="_blank" rel="noopener">http://blog.csdn.net/sbsujjbcy/article/details/45420475</a></p><h2 id="如何仅在-Debug-下启用-Stetho"><a href="#如何仅在-Debug-下启用-Stetho" class="headerlink" title="如何仅在 Debug 下启用 Stetho"></a>如何仅在 Debug 下启用 Stetho</h2><p>之前已经有很多人写过关于基本的如何集成 Stetho 及其使用方式。这里我着重描述如何仅在 Debug 版本中使用 Stetho。</p><p>Stetho 是一个调试工具，其大部分使用场景都仅限于开发阶段。如果在 Release 中也导入 Stetho 的话，会导致应用体积变大，并有可能使应用的安全性降低。因此我们需要仅在 Debug 版本中使用 Stetho。</p><p>基本方法分为两步：</p><ol><li>在 build.gradle 添加依赖的时候，使用 debugCompile 而不是 compile</li><li>分别在 debug 和 release 代码目录中创建 Stetho 初始化类，然后在 Application 初始化的时候使用该 Stetho 初始化类进行初始化。</li></ol><p>如果项目采用的是 Android Studio 的代码结构，并且 OkHttp 直接在项目中，那么只要参照这篇教程即可： <a href="http://stackoverflow.com/questions/30172308/include-stetho-only-in-the-debug-build-variant/31483962#31483962" target="_blank" rel="noopener">http://stackoverflow.com/questions/30172308/include-stetho-only-in-the-debug-build-variant/31483962#31483962</a></p><p>但我在我的项目中按照此教程进行操作的时候碰到三个问题，下面分别讲述</p><h2 id="问题一：debug-目录可以识别，但-release-目录无法正常识别出-java-代码"><a href="#问题一：debug-目录可以识别，但-release-目录无法正常识别出-java-代码" class="headerlink" title="问题一：debug 目录可以识别，但 release 目录无法正常识别出 java 代码"></a>问题一：debug 目录可以识别，但 release 目录无法正常识别出 java 代码</h2><p>当我们创建 debug 目录和 release 目录时，有时候会出现其中一个目录中的 java 文件无法被正常识别为 java class 的情况。此时需要注意，该目录与 build variant 的编译方式是同步的。当我们以 debug 方式编译的时候，Android studio 可以识别 debug 目录，但是无法识别 release 目录。反之亦然。</p><h2 id="问题二：OkHttp-是以-Library-方式添加，无法以-debug-方式进行编译"><a href="#问题二：OkHttp-是以-Library-方式添加，无法以-debug-方式进行编译" class="headerlink" title="问题二：OkHttp 是以 Library 方式添加，无法以 debug 方式进行编译"></a>问题二：OkHttp 是以 Library 方式添加，无法以 debug 方式进行编译</h2><p>对于 Library 的 Module，默认总是会以 Release 进行编译，即使在编译的时候选择的 Debug 也没用。为了防止这一情况，我们需要在 Library 的 build.gradle 中添加以下内容：</p><pre><code>publishNonDefault true</code></pre><p>然后在主 Module 中将对改 library 的依赖改为：</p><pre><code>debugCompile project(path: &apos;:foo_library&apos;, configuration: &apos;debug&apos;)releaseCompile project(path: &apos;:foo_library&apos;, configuration: &apos;release&apos;)</code></pre><p>即可正常的以 debug 方式编译 library 了。其他的要点同上</p><h2 id="问题三：项目结构是-Eclipse-结构而非-Android-Studio-结构"><a href="#问题三：项目结构是-Eclipse-结构而非-Android-Studio-结构" class="headerlink" title="问题三：项目结构是 Eclipse 结构而非 Android Studio 结构"></a>问题三：项目结构是 Eclipse 结构而非 Android Studio 结构</h2><p>在 Android Studio 结构的代码中，debug 目录是 <code>src/debug/java/</code>，release 目录是 <code>src/release/java/</code> </p><p>而在 Eclipse 的代码结构中，debug 目录是 <code>build-types/debug/java/</code>, release 目录是 <code>build-types/release/java/</code></p><p>基本结构如下图所示：</p><pre><code>module    - build-types        - debug            - java                - com                    - package.name        - release            - ...    - src        - com            - package.name</code></pre><hr><h2 id="其他的问题"><a href="#其他的问题" class="headerlink" title="其他的问题"></a>其他的问题</h2><p>我会将使用 Stetho 过程中碰到的其他问题陆续更新在这里。</p><h3 id="Database-中内容显示不全"><a href="#Database-中内容显示不全" class="headerlink" title="Database 中内容显示不全"></a>Database 中内容显示不全</h3><p>使用 Stetho 查看 Database 时，显示的行数被限制在 250 行，代码在 <a href="https://github.com/facebook/stetho/blob/master/stetho/src/main/java/com/facebook/stetho/inspector/protocol/module/Database.java#L54" target="_blank" rel="noopener">stetho/stetho/src/main/java/com/facebook/stetho/inspector/protocol/module/Database.java</a> 中：</p><pre><code>/** * The protocol doesn&apos;t offer an efficient means of pagination or anything like that so * we&apos;ll just cap the result list to some arbitrarily large number that I think folks will * actually need in practice. * &lt;p&gt; * Note that when this limit is exceeded, a dummy row will be introduced that indicates * truncation occurred. */private static final int MAX_EXECUTE_RESULTS = 250;</code></pre><p>因此我们要查看 database 的时候可能需要自己编写 SQL 语句进行查询。方法是选中某个 database（而非某个 Table）并在右侧光标处输入语句进行查询。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://facebook.github.io/stetho/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Stetho&lt;/a&gt; 是 Facebook 提供的一个面向 Android App 的调试工具。在配置好 Stetho 之后，我们可以在 Chrome 中对特定应用进行调试，功能包括：查看数据库与 SharedPerferences、查看网络请求、查看当前视图布局（hierarchy view）等等，甚至可以通过 JavaScript 调用 Android App 中的部分命令。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://wliu6v.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android Annotation</title>
    <link href="http://wliu6v.github.io/Android-Annotation/"/>
    <id>http://wliu6v.github.io/Android-Annotation/</id>
    <published>2015-12-20T09:57:44.000Z</published>
    <updated>2017-09-30T07:36:03.459Z</updated>
    
    <content type="html"><![CDATA[<h2 id="IntDef"><a href="#IntDef" class="headerlink" title="IntDef"></a>IntDef</h2><p>通过 <code>@IntDef</code> 标注可以限定一个方法的输入输出内容。</p><p>枚举类型可以很好的限定值的范围，但是有性能问题（Enum 的性能问题在 <a href="https://developer.android.com/topic/performance/memory.html#Abstractions" target="_blank" rel="noopener">Android Developer</a> 中有提到，在 <a href="http://hukai.me/android-performance-patterns-season-3/" target="_blank" rel="noopener">胡凯 - Android性能优化典范 - 第3季</a> 中的第4小节中有详细解释）。在很多情况下，可以通过自定义的 <code>@IntDef</code> 和 <code>@StringDef</code> 来替代枚举类型。而且用起来也比在枚举类型里面实现 valueOf 等方法要简洁少许。</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IceCreamFlavourManager</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> flavour;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> VANILLA = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CHOCOLATE = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STRAWBERRY = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@IntDef</span>(&#123;VANILLA, CHOCOLATE, STRAWBERRY&#125;)</span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@interface</span> Flavour &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Flavour</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getFlavour</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> flavour;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFlavour</span><span class="params">(@Flavour <span class="keyword">int</span> flavour)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.flavour = flavour;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;IntDef&quot;&gt;&lt;a href=&quot;#IntDef&quot; class=&quot;headerlink&quot; title=&quot;IntDef&quot;&gt;&lt;/a&gt;IntDef&lt;/h2&gt;&lt;p&gt;通过 &lt;code&gt;@IntDef&lt;/code&gt; 标注可以限定一个方法的输入输出内容。&lt;/p&gt;
&lt;p&gt;枚举类型可以很好的限定值的范围，但是有性能问题（Enum 的性能问题在 &lt;a href=&quot;https://developer.android.com/topic/performance/memory.html#Abstractions&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Android Developer&lt;/a&gt; 中有提到，在 &lt;a href=&quot;http://hukai.me/android-performance-patterns-season-3/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;胡凯 - Android性能优化典范 - 第3季&lt;/a&gt; 中的第4小节中有详细解释）。在很多情况下，可以通过自定义的 &lt;code&gt;@IntDef&lt;/code&gt; 和 &lt;code&gt;@StringDef&lt;/code&gt; 来替代枚举类型。而且用起来也比在枚举类型里面实现 valueOf 等方法要简洁少许。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://wliu6v.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio Can&#39;t Build After Change Default Code Page of Windows Console to UTF-8</title>
    <link href="http://wliu6v.github.io/Android-Studio-Can-t-Build-After-Change-Default-Code-Page-of-Windows-Console-to-UTF-8/"/>
    <id>http://wliu6v.github.io/Android-Studio-Can-t-Build-After-Change-Default-Code-Page-of-Windows-Console-to-UTF-8/</id>
    <published>2015-04-06T08:16:50.000Z</published>
    <updated>2015-04-06T08:35:06.291Z</updated>
    
    <content type="html"><![CDATA[<p>在 Windows 环境下进行 Android 开发的时候，如果修改了 CMD 的默认代码页，将会导致 Android Studio 无法正常编译。因为修改了默认代码页后会导致 <code>C:\Windows\System32\find.exe</code> 失效。</p><p>将 CMD 的默认代码页修改回默认值即可。在简体中文环境下该默认值通常是 <code>chcp 936</code>。</p><p>如果就是希望每次使用 CMD 的时候都是 UTF-8 代码页，可以建一个 bat 文件，如 <code>cmd_65001</code>，并将其添加至环境变量中。bat 文件的内容为 ：</p><pre><code>C:\Windows\System32\cmd.exe /k CHCP 65001</code></pre><p>这样每次只要在运行里面输入 cmd_65001 ，就可以开启一个 UTF-8 代码页的 CMD 窗口了。</p><p>不过好像不能改字体- =</p><p><a href="http://superuser.com/questions/269818/change-default-code-page-of-windows-console-to-utf-8" target="_blank" rel="noopener">Ref : superuser - Change default code page of Windows console to UTF-8</a><br><a href="http://superuser.com/questions/176737/why-find-exe-not-work-in-windows-7" target="_blank" rel="noopener">Ref : superuser - Why find.exe not work in Windows 7?</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在 Windows 环境下进行 Android 开发的时候，如果修改了 CMD 的默认代码页，将会导致 Android Studio 无法正常编译。因为修改了默认代码页后会导致 &lt;code&gt;C:\Windows\System32\find.exe&lt;/code&gt; 失效。&lt;/p
      
    
    </summary>
    
    
      <category term="Android" scheme="http://wliu6v.github.io/tags/Android/"/>
    
      <category term="Windows" scheme="http://wliu6v.github.io/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>Set onClickListener for EditText in ActionBar&#39;s SearchView</title>
    <link href="http://wliu6v.github.io/Set-onClickListener-for-EditText-in-ActionBar-s-SearchView/"/>
    <id>http://wliu6v.github.io/Set-onClickListener-for-EditText-in-ActionBar-s-SearchView/</id>
    <published>2015-04-06T08:14:05.000Z</published>
    <updated>2017-09-30T07:24:17.684Z</updated>
    
    <content type="html"><![CDATA[<p>要为 ActionBar 上的 SearchView 的 EditText 设置 onClickListener，可以考虑通过递归的方式为 SearchView 的所有子 View / ViewGroup 设置 onClickListener。代码如下：</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setOnClickListenerForViewGroup</span><span class="params">(View v, View.OnClickListener listener)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (v <span class="keyword">instanceof</span> ViewGroup) &#123;</span><br><span class="line">ViewGroup group = (ViewGroup)v;</span><br><span class="line"><span class="keyword">int</span> count = group.getChildCount();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">View child = group.getChildAt(i);</span><br><span class="line"><span class="keyword">if</span> (child <span class="keyword">instanceof</span> LinearLayout || child <span class="keyword">instanceof</span> RelativeLayout) &#123;</span><br><span class="line">setOnClickListenerForViewGroup(child, listener);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (child <span class="keyword">instanceof</span> TextView) &#123;</span><br><span class="line">TextView text = (TextView)child;</span><br><span class="line">text.setFocusable(<span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line">child.setOnClickListener(listener);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然也可以通过类似的方式获取到 EditText 对象，并对其设置 onClickListener() </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> EditText <span class="title">getEditTextFromSearchView</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">EditText et = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (v <span class="keyword">instanceof</span> ViewGroup) &#123;</span><br><span class="line">ViewGroup group = (ViewGroup)v;</span><br><span class="line"><span class="keyword">int</span> count = group.getChildCount();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">View child = group.getChildAt(i);</span><br><span class="line"><span class="keyword">if</span> (child <span class="keyword">instanceof</span> LinearLayout || child <span class="keyword">instanceof</span> RelativeLayout) &#123;</span><br><span class="line">EditText tmpEt = getEditTextFromSearchView(child);</span><br><span class="line"><span class="keyword">if</span> (tmpEt != <span class="keyword">null</span>) &#123;</span><br><span class="line">et = tmpEt;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (child <span class="keyword">instanceof</span> EditText) &#123;</span><br><span class="line">et = (EditText) child;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> et;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;要为 ActionBar 上的 SearchView 的 EditText 设置 onClickListener，可以考虑通过递归的方式为 SearchView 的所有子 View / ViewGroup 设置 onClickListener。代码如下：&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://wliu6v.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Preference Crash When getSummary() Contains &#39;%&#39;</title>
    <link href="http://wliu6v.github.io/Preference-Crash-When-getSummary-Contains/"/>
    <id>http://wliu6v.github.io/Preference-Crash-When-getSummary-Contains/</id>
    <published>2015-04-06T08:11:48.000Z</published>
    <updated>2017-09-30T07:12:50.166Z</updated>
    
    <content type="html"><![CDATA[<p>当 ListPreference 中执行 getSummary 的时候碰到了字符 ‘%’ 时会导致应用 crash。</p><h3 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h3><p>重写 ListPreference 的 getSummary 方法，避免在遇到 ‘%’ 的时候 crash。</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">NoneFormatSummaryListPreference</span> <span class="keyword">extends</span> <span class="title">ListPreference</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">NoneFormatSummaryListPreference</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(context);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CharSequence <span class="title">getSummary</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// for call super.super.getSummary()</span></span><br><span class="line">CharSequence[] entries = <span class="keyword">super</span>.getEntries();</span><br><span class="line"><span class="keyword">super</span>.setEntries(<span class="keyword">null</span>);</span><br><span class="line">CharSequence result = <span class="keyword">super</span>.getSummary();</span><br><span class="line"><span class="keyword">super</span>.setEntries(entries);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line"><span class="comment">// return super.getSummary();</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>以下内容皆引用自 <a href="http://gmariotti.blogspot.sg/2013/02/preference-summary-or-secondary-text.html" target="_blank" rel="noopener">Preference Summary or Secondary Text</a> :</p><blockquote><p><strong>A note about ListPreference.</strong> In <a href="http://developer.android.com/reference/android/preference/ListPreference.html#setSummary%28java.lang.CharSequence%29" target="_blank" rel="noopener">android doc</a> we can read:</p></blockquote><blockquote><blockquote><p>If the summary has a String formatting marker in it (i.e. “%s” or “%1$s”), then the current entry value will be substituted in its place when it’s retrieved.</p></blockquote></blockquote><blockquote><p>As a result, if you set “summary” that contains “%” char (like “5%”), you can have <code>java.util.UnknownFormatConversionException</code>: Conversion: because it may be an unknown format.<br>The reason is here (standard method in ListPreference)</p></blockquote><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public CharSequence getSummary() &#123; </span><br><span class="line">final CharSequence entry = getEntry(); </span><br><span class="line">if (mSummary == null || entry == null) &#123; </span><br><span class="line">return super.getSummary(); </span><br><span class="line">&#125; else &#123; </span><br><span class="line">return String.format(mSummary, entry); </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>If you want to use value like “5%” in ListPreference, in API Level 11 or higher, you need to be careful.<br>I suggest you create a subclass of ListPreference, override getSummary() method and return whatever you need, skipping the call to String.format().<br>Alternatively you can obtain percent character in String.format() by specifying “%%”. </p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当 ListPreference 中执行 getSummary 的时候碰到了字符 ‘%’ 时会导致应用 crash。&lt;/p&gt;
&lt;h3 id=&quot;解决方式&quot;&gt;&lt;a href=&quot;#解决方式&quot; class=&quot;headerlink&quot; title=&quot;解决方式&quot;&gt;&lt;/a&gt;解决方式&lt;/h3&gt;&lt;p&gt;重写 ListPreference 的 getSummary 方法，避免在遇到 ‘%’ 的时候 crash。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://wliu6v.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Integer.getInteger()</title>
    <link href="http://wliu6v.github.io/Integer-getInteger/"/>
    <id>http://wliu6v.github.io/Integer-getInteger/</id>
    <published>2015-04-06T08:09:55.000Z</published>
    <updated>2015-04-06T08:11:00.413Z</updated>
    
    <content type="html"><![CDATA[<p>Integer 类中包含三个名字比较相近的静态方法 : <code>getInteger()</code>, <code>valueOf()</code>, <code>parseInt()</code> 。这三个方法名字差不多，但实际上，getInteger 方法是个坑。</p><p>valueOf() 与 parseInt() 这两个方法效果比较接近。都是将某个 String 转为数值类型。其中，valueOf() 方法将会把 int 或 String 转成 Integer 类型，parseInt() 方法将会把 String 转成 int 类型。</p><p>但对于 getInteger() 并非如此。JAVADoc 对 getInteger() 方法的描述是：</p><blockquote><p>   Returns the Integer value of the system property identified by string.<br>   Returns null if string is null or empty, if the property can not be found or if its value can not be parsed as an integer.</p></blockquote><blockquote><p>   Parameters</p><p>   string<br>       the name of the requested system property.</p><p>   Returns<br>       the requested property’s value as an Integer or null.</p></blockquote><p>因此如果对一个任意数值字符串使用 getInteger() 方法，结果通常为 <code>null</code>。</p><p>类似的， <code>Boolean.getBoolean(&quot;true&quot;);</code> 将得到结果 <code>Boolean.FALSE</code>。</p><p><a href="http://konigsberg.blogspot.com/2008/04/integergetinteger-are-you-kidding-me.html" target="_blank" rel="noopener">Ref : Integer.getInteger. Are you kidding me?</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Integer 类中包含三个名字比较相近的静态方法 : &lt;code&gt;getInteger()&lt;/code&gt;, &lt;code&gt;valueOf()&lt;/code&gt;, &lt;code&gt;parseInt()&lt;/code&gt; 。这三个方法名字差不多，但实际上，getInteger 方法是个坑。
      
    
    </summary>
    
    
      <category term="Android" scheme="http://wliu6v.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>NestedScrollView</title>
    <link href="http://wliu6v.github.io/NestedScrollView/"/>
    <id>http://wliu6v.github.io/NestedScrollView/</id>
    <published>2015-04-06T04:00:45.000Z</published>
    <updated>2016-05-28T01:58:32.632Z</updated>
    
    <content type="html"><![CDATA[<h2 id="场景描述"><a href="#场景描述" class="headerlink" title="场景描述"></a>场景描述</h2><p>参照 <a href="http://wliu6v.github.io/2014/ListView-in-ScrollView">之前的内容 : ListView in ScrollView</a></p><a id="more"></a><p><img src="/img/scroll_1.png" alt="Nested Scroll 示意图"></p><p>其中，Header 需要伴随下面 Content 的滚动而离开屏幕，但 Tab 滚动到屏幕顶部后会固定在顶部。我们可以通过点击 Tab 切换不同的 ListView（或 GridView）。</p><h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><p>对于该种场景，首先我们不能将 Header 部分作为 ListView 的 HeaderView。因为若如此做，那么点击 Tab 切换 ListView 时，Header 部分需要随之发生变化，这就给 Header 的管理带来了麻烦。</p><p>然后是之前我使用的思路：用一个 ScrollView 在外面嵌套着 ListView，同时根据内外层的 ListView 与 ScrollView 各自的滚动位置分发 Touch 事件。后来在使用过程中，发现此种方式会引入很多 Bug，比如在横竖屏切换或者进入 Activity 销毁并重建后都有可能导致滚动位置发生异常。因此需要考虑新的方式。</p><p>后来考虑，可以监听 ListView 的滚动事件，并通过代码使 Header 与 Tab 移动相同的距离，直至 Header 从屏幕顶端滑出而 Tab 恰好停在顶端为止。大致分为下列几步：</p><ol><li>将 Header 与 Tab 以 <code>layout_alignTop</code> 的方式叠放在 ListView 上，而不是以 <code>layout_above</code> 的方式。</li><li>为 ListView 添加一个空白的 HeaderView 作为占位符，其高度与 Header 相同。</li><li>在 ListView 添加 OnScrollListener，在其 onScroll 事件中根据当前滚动的位置改变 Header 和 Tab 的位置。（通过 <code>view.setTranslationY(floatY)</code> 方法实现）。</li><li>因为 Tab 需要居顶，因此 Header 滚动到了适当的高度后就不应该再继续滚动，而是停在如下图所示的位置：</li></ol><p><img src="/img/scroll_2.png" alt="Nested Scroll 示意图2"></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>代码分为以下 3 个部分：</p><ol><li>接口 ScrollTabHolder</li><li>外层 Activity 与其布局</li><li>内层 Fragment 与其布局</li></ol><h3 id="接口-ScrollTabHolder"><a href="#接口-ScrollTabHolder" class="headerlink" title="接口 ScrollTabHolder"></a>接口 ScrollTabHolder</h3><pre><code>public interface ScrollTabHolder {    void adjustScroll(int scrollHeight);    void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount, int pagePosition);}</code></pre><h3 id="外层-Activity-布局"><a href="#外层-Activity-布局" class="headerlink" title="外层 Activity 布局"></a>外层 Activity 布局</h3><p>其中， pager 作为 Fragment 的容器，header_layout 包含了上文所述的 Header 与 Tab 这两部分。</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;FrameLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;    android:layout_width=&quot;match_parent&quot;    android:layout_height=&quot;match_parent&quot; &gt;    &lt;android.support.v4.view.ViewPager        android:id=&quot;@+id/pager&quot;        android:layout_width=&quot;match_parent&quot;        android:layout_height=&quot;match_parent&quot; /&gt;    &lt;LinearLayout        android:id=&quot;@+id/header_layout&quot;        android:layout_width=&quot;match_parent&quot;        android:layout_height=&quot;wrap_content&quot;        android:orientation=&quot;vertical&quot;&gt;        &lt;View            android:id=&quot;@+id/header&quot;            android:layout_width=&quot;match_parent&quot;            android:layout_height=&quot;250dp&quot;            android:background=&quot;#FF8888&quot;/&gt;        &lt;com.astuetz.PagerSlidingTabStrip            android:id=&quot;@+id/tabs&quot;            android:layout_width=&quot;match_parent&quot;            android:layout_height=&quot;48dip&quot;            android:layout_gravity=&quot;bottom&quot;            android:background=&quot;@android:color/holo_red_dark&quot; /&gt;    &lt;/LinearLayout&gt;&lt;/FrameLayout&gt;</code></pre><h3 id="外层-Activity"><a href="#外层-Activity" class="headerlink" title="外层 Activity"></a>外层 Activity</h3><p>省略了很多内容，只保留了 scroll 相关的内容</p><pre><code>public class MainActivity extends ActionBarActivity implements ScrollTabHolder,    ViewPager.OnPageChangeListener {    private View mHeaderLayout;    private View mHeader;    private int mActionBarHeight;    private int mHeaderLayoutHeight;    private int mHeaderHeight;    private int mMinHeaderTranslation;    private TypedValue mTypedValue = new TypedValue();    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        mHeaderLayout = findViewById(R.id.header_layout);        mHeaderLayout.getViewTreeObserver().addOnGlobalLayoutListener(                new ViewTreeObserver.OnGlobalLayoutListener() {                    @Override                    public void onGlobalLayout() {                        if (mHeaderLayoutHeight == 0) {                            mHeaderLayoutHeight = mHeaderLayout.getHeight();                            mHeaderHeight = mHeader.getHeight();                            // removeOnGlobalLayoutListener should be removeGlobalOnLayoutListener when SDK_VERSION &lt; SDK_JELLY_BEAN                            mHeaderLayout.getViewTreeObserver()                                    .removeOnGlobalLayoutListener(this);                        }                    }                });        mHeader = findViewById(R.id.header);        mPagerAdapter = new PagerAdapter(getSupportFragmentManager());        mPagerAdapter.setTabHolderScrollingContent(this);        mViewPager.setAdapter(mPagerAdapter);        mPagerSlidingTabStrip.setViewPager(mViewPager);        mPagerSlidingTabStrip.setOnPageChangeListener(this);    }    @Override    public void onPageSelected(int position) {        SparseArrayCompat&lt;ScrollTabHolder&gt; scrollTabHolders = mPagerAdapter                .getScrollTabHolders();        ScrollTabHolder currentHolder = scrollTabHolders.valueAt(position);        currentHolder.adjustScroll((int) (mHeaderLayout.getHeight() + ViewHelper                .getTranslationY(mHeaderLayout)));    }    @Override    public void onScroll(AbsListView view, int firstVisibleItem,            int visibleItemCount, int totalItemCount, int pagePosition) {        mHeaderHeight = mHeader.getHeight();        mMinHeaderTranslation = getActionBarHeight() - mHeaderHeight;        int scrollY = getScrollY(view);        mHeaderLayout.setTranslationY(Math.max(-scrollY, mMinHeaderTranslation)); // SDK &lt; HONEYCOMB should use NineOldAnimation     }    @Override    public void adjustScroll(int scrollHeight) {        // nothing    }    public int getScrollY(AbsListView view) {        View c = view.getChildAt(0);        if (c == null) {            return 0;        }        int firstVisiblePosition = view.getFirstVisiblePosition();        int top = c.getTop();        int headerHeight = 0;        if (firstVisiblePosition &gt;= 1) {            headerHeight = mHeaderLayoutHeight;        }        return -top + firstVisiblePosition * c.getHeight() + headerHeight;    }    @TargetApi(Build.VERSION_CODES.HONEYCOMB)    public int getActionBarHeight() {        if (mActionBarHeight != 0) {            return mActionBarHeight;        }        if (Build.VERSION.SDK_INT &gt; Build.VERSION_CODES.HONEYCOMB) {            getTheme().resolveAttribute(android.R.attr.actionBarSize,                    mTypedValue, true);        } else {            getTheme()                    .resolveAttribute(R.attr.actionBarSize, mTypedValue, true);        }        mActionBarHeight = TypedValue.complexToDimensionPixelSize(                mTypedValue.data, getResources().getDisplayMetrics());        return mActionBarHeight;    }    public class PagerAdapter extends FragmentPagerAdapter {        private SparseArrayCompat&lt;ScrollTabHolder&gt; mScrollTabHolders;        private ScrollTabHolder mListener;        public PagerAdapter(FragmentManager fm) {            super(fm);            mScrollTabHolders = new SparseArrayCompat&lt;ScrollTabHolder&gt;();        }        public void setTabHolderScrollingContent(ScrollTabHolder listener) {            mListener = listener;        }        @Override        public Fragment getItem(int position) {            ScrollTabHolderFragment fragment = (ScrollTabHolderFragment) SampleListFragment                    .newInstance(position);            mScrollTabHolders.put(position, fragment);            if (mListener != null) {                fragment.setScrollTabHolder(mListener);            }            return fragment;        }        public SparseArrayCompat&lt;ScrollTabHolder&gt; getScrollTabHolders() {            return mScrollTabHolders;        }    }}</code></pre><h3 id="内层-Fragment"><a href="#内层-Fragment" class="headerlink" title="内层 Fragment"></a>内层 Fragment</h3><p>内层 Fragment 仅包含一个 ListView</p><pre><code>public class SampleListFragment extends ScrollTabHolderFragment implements OnScrollListener {    private ListView mListView;    @Override    public void onActivityCreated(Bundle savedInstanceState) {        super.onActivityCreated(savedInstanceState);        mListView.setOnScrollListener(this);        View placeHolderView = getActivity().getLayoutInflater().inflate(R.layout.view_header_placeholder, mListView, false);        if (mListView.getHeaderViewsCount() &gt; 0) {            mListView.removeHeaderView(placeHolderView);        }        mListView.addHeaderView(placeHolderView);    }    @Override    public void adjustScroll(int scrollHeight) {        if (scrollHeight == 0 &amp;&amp; mListView.getFirstVisiblePosition() &gt;= 1) {            return;        }        mListView.setSelectionFromTop(1, scrollHeight);    }    @Override    public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {        if (mScrollTabHolder != null)            mScrollTabHolder.onScroll(view, firstVisibleItem, visibleItemCount, totalItemCount, mPosition);    }}</code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>若 Tab 不需要置顶而是需要随 Header 一起滚动离开屏幕，则需要修改外层 Activity 中 onScroll 方法中的 mMinHeaderTranslation 与 scrollY 值。</li><li>当切换 Tab 时，最好将 ListView 滚动至顶部，同时是 Header 位置复位，从而避免切换 Tab 时带来的部分位置空白的问题。</li><li>如果 Header 部分的高度会动态变化，则应将外层 Activity 中的 onGlobalLayout 相关内容进行修改，去除 removeOnGlobalLayout 的相关代码，同时对 HeaderLayoutHeight 的高度进行判断，如果高度发生了变化就进入 if 代码段。</li><li>需要注意添加了 HeaderView 之后会导致 ListView 的 position 发生变化，ListView 的 onItemClick 方法会受到影响。应采用 <code>parent.getAdapter().getItem(postion)</code> 或其他方式进行处理。</li></ol><h2 id="参考自"><a href="#参考自" class="headerlink" title="参考自"></a>参考自</h2><p><a href="https://github.com/kmshack/Android-ParallaxHeaderViewPager" target="_blank" rel="noopener">Android-ParallaxHeaderViewPager</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;场景描述&quot;&gt;&lt;a href=&quot;#场景描述&quot; class=&quot;headerlink&quot; title=&quot;场景描述&quot;&gt;&lt;/a&gt;场景描述&lt;/h2&gt;&lt;p&gt;参照 &lt;a href=&quot;http://wliu6v.github.io/2014/ListView-in-ScrollView&quot;&gt;之前的内容 : ListView in ScrollView&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://wliu6v.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>bookmarks</title>
    <link href="http://wliu6v.github.io/bookmarks/"/>
    <id>http://wliu6v.github.io/bookmarks/</id>
    <published>2014-12-20T06:53:27.000Z</published>
    <updated>2015-06-08T11:32:45.972Z</updated>
    
    <content type="html"><![CDATA[<h2 id="优质控件"><a href="#优质控件" class="headerlink" title="优质控件"></a>优质控件</h2><h3 id="代码家"><a href="#代码家" class="headerlink" title="代码家"></a><a href="http://blog.daimajia.com/" target="_blank" rel="noopener">代码家</a></h3><p>编写了许多动画不错的 view 控件。比如 <a href="http://blog.daimajia.com/2014/09/this-is-productivity/" target="_blank" rel="noopener">AndroidSwipeLayout</a> 、 <a href="http://blog.daimajia.com/2014/08/android-view-hover/" target="_blank" rel="noopener">AndroidViewHover</a> 等</p><h2 id="工具包"><a href="#工具包" class="headerlink" title="工具包"></a>工具包</h2><p><a href="http://apistore.baidu.com/astore/classificationservicelist/33.html" target="_blank" rel="noopener">API Store</a> 将各种公开的 API 汇总起来的一个网站。包括二维码 API 或者一些地图、推送、三方登录之类的 API</p><p><a href="http://www.maiziedu.com/course/2/" target="_blank" rel="noopener">麦子学院</a></p><p><a href="http://stormzhang.gitcafe.com/android/2014/07/07/learn-android-from-rookie/" target="_blank" rel="noopener">Android学习之路</a></p><h2 id="Code-Style"><a href="#Code-Style" class="headerlink" title="Code Style"></a>Code Style</h2><p><a href="http://blog.jobbole.com/77051/" target="_blank" rel="noopener">对代码命名的一点思考和理解</a></p><h2 id="ListView"><a href="#ListView" class="headerlink" title="ListView"></a>ListView</h2><p><a href="http://geecity.se/2013/06/dragsortlistview-with-sections/#" target="_blank" rel="noopener">DragSortListView with Sections</a></p><h2 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h2><p><a href="http://ingramchen.io/blog/2014/09/prevention-of-android-dex-64k-method-size-limit.html" target="_blank" rel="noopener">預防 Android Dex 64k Method Size Limit</a></p><p><a href="http://blog.csdn.net/ashqal/article/details/21869151" target="_blank" rel="noopener">【android ndk】macos环境下Android Studio中利用gradle编译jni模块及配置 </a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;优质控件&quot;&gt;&lt;a href=&quot;#优质控件&quot; class=&quot;headerlink&quot; title=&quot;优质控件&quot;&gt;&lt;/a&gt;优质控件&lt;/h2&gt;&lt;h3 id=&quot;代码家&quot;&gt;&lt;a href=&quot;#代码家&quot; class=&quot;headerlink&quot; title=&quot;代码家&quot;&gt;&lt;/a&gt;&lt;a
      
    
    </summary>
    
    
      <category term="Android" scheme="http://wliu6v.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Hexo guide</title>
    <link href="http://wliu6v.github.io/Hexo-guide/"/>
    <id>http://wliu6v.github.io/Hexo-guide/</id>
    <published>2014-11-17T12:13:41.000Z</published>
    <updated>2014-11-29T07:13:01.259Z</updated>
    
    <content type="html"><![CDATA[<p>参考以下系列文章</p><p><a href="http://zipperary.com/2013/05/28/hexo-guide-1/" target="_blank" rel="noopener">http://zipperary.com/2013/05/28/hexo-guide-1/</a></p><p><a href="http://zipperary.com/categories/hexo/" target="_blank" rel="noopener">http://zipperary.com/categories/hexo/</a></p><p><a href="http://wsgzao.github.io/post/hexo-scroll-to-top/" target="_blank" rel="noopener">添加 “回到顶部” 按钮</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;参考以下系列文章&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://zipperary.com/2013/05/28/hexo-guide-1/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://zipperary.com/2013/05/28/he
      
    
    </summary>
    
    
      <category term="Hexo" scheme="http://wliu6v.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>ListView in ScrollView</title>
    <link href="http://wliu6v.github.io/ListView-in-ScrollView/"/>
    <id>http://wliu6v.github.io/ListView-in-ScrollView/</id>
    <published>2014-10-11T15:31:37.000Z</published>
    <updated>2016-05-28T01:59:02.950Z</updated>
    
    <content type="html"><![CDATA[<h2 id="本篇内容已过时"><a href="#本篇内容已过时" class="headerlink" title="本篇内容已过时"></a>本篇内容已过时</h2><p>Update 2015.04.06</p><p>发现了新的方式，实现的效果更好，代码更简练而且 bug 更少。请查阅 <a href="http://wliu6v.github.io/2015/NestedScrollView/">NestedScrollView</a></p><h2 id="场景描述"><a href="#场景描述" class="headerlink" title="场景描述"></a>场景描述</h2><p>对于 Scroll 嵌套 Scroll 这种情况来说，最理想的情况是避免进行这种布局设计。但有时候并非太容易做。比如下图：</p><p><img src="/img/scroll_1.png" alt="Nested Scroll 示意图"></p><p>其中，Header 需要能够随着 ListView 的滚动离开屏幕，但 Tab 会留在界面上面。而且通过点击 Tab，需要可以在不同界面中进行切换。</p><p>如果不需要可以切换的 Tab 效果，那么我们可以将 Header 与 Tab 都作为 ListView 的 HeaderView 来实现。但是如果要能够实现 Tab 切换的话，显然我们不能将 Header 对于每个 Tab 中的 ListView 都作为 HeaderView。因此只能将 Tab 与下面的 ListView 视作是同级的控件，然后在外面嵌套一层 ScrollView。</p><a id="more"></a><h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><h3 id="1-展开内层的-ListView"><a href="#1-展开内层的-ListView" class="headerlink" title="1. 展开内层的 ListView"></a>1. 展开内层的 ListView</h3><p>关于这个问题，网上有一种现成的解决方案：计算整个内层 ListView 的高度，将其全部展开，然后就可以将其作为一个 LinearLayout 放在 ScrollView 中了。</p><p>这种做法的优点是处理起来非常简单，不需要考虑 Touch 事件。但有下列缺点：</p><ol><li>展开整个 ListView 并计算其高度这个操作需要对每个元素执行一次 getView 操作，比较耗时。如果只计算一个元素的高度并乘以元素数目，则在每个元素不等高时可能出现问题。</li><li>展开整个 ListView 将导致 ListView 原有的重用机制无法正常起作用，当需要加载大量资源时，可能导致性能问题。</li><li>对于通常的 loadMore，我们可以监测 onScroll 事件，判断其是否滚动到了最后一个元素。如果将 ListView 全部展开，则即使最底部元素没有显示在屏幕中，也会执行 loadMore。</li><li>无法与 DragSoftListView 同时使用。</li></ol><h3 id="2-根据内层与外层的滚动位置分发-touch-事件"><a href="#2-根据内层与外层的滚动位置分发-touch-事件" class="headerlink" title="2. 根据内层与外层的滚动位置分发 touch 事件"></a>2. 根据内层与外层的滚动位置分发 touch 事件</h3><p>我们可以在滚动的时候令其先滚动外层的 ScrollView，滚到底的时候再滚动 ListView。</p><p>具体思路，首先根据上右图，我们需要将 ListView 设置为整个屏幕的高度，并放置在外层的 ScrollView 中。也就是说， ScrollView 的全部高度为：TopView 的高度 + Tab 的高度 + 整个屏幕的高度（即下面的 ListView）。</p><p>当屏幕由初始状态向下滚动时，我们需要监测外层 ScrollView 滚动的位置，并与 TopView 的高度作比较。如果 TopView 还在视野内，则滚动事件由外层 ScrollView 来处理。如果 TopView 完全消失，则将滚动事件由内层的 ListView 来处理。</p><p>如果是向上滚动，则首先需要判断 ListView 是否已经被滚动到了顶端。如果否，则将滚动事件给 ListView 处理。如果 ListView 的第一个元素已经到顶，则将滚动事件交给外层的 ScrollView 处理。</p><p>部分代码如下：</p><p>外层：</p><pre><code>mRootScrollView.getViewTreeObserver().addOnScrollChangedListener(                new ViewTreeObserver.OnScrollChangedListener() {                    @Override                    public void onScrollChanged() {                        if (mTabTopPosition == 0 || mTabHeight == 0) {                            setTabPositionValue();                        }                        if (mRootScrollView.getScrollY() &gt;= (mTabTopPosition - 5)) {                            mTopTabView.setVisibility(View.VISIBLE);                            for (InnerFragment innerFragment : mFragmentList) {                                innerFragment.setOutCanDown(false);                            }                        } else if (mRootScrollView.getScrollY() &lt;= mTabTopPosition                                + mTabHeight) {                            mTopTabView.setVisibility(View.INVISIBLE);                            for (InnerFragment innerFragment : mFragmentList) {                                innerFragment.setOutCanDown(true);                            }                        }                    }                });/** * Help for controling the Top Tab&apos;s visibility when scrolling */private void setTabPositionValue() {    mTabHeight = mTabView.getHeight();    mTabTopPosition = mTabView.getTop();    mScrollViewTop = mRootScrollView.getTop();    Handler handler = new Handler();    handler.postDelayed(new Runnable() {        @Override        public void run() {            int height = mFragmentContainer.getHeight();            LinearLayout.LayoutParams params = (LinearLayout.LayoutParams) mFragmentContainer                    .getLayoutParams();            params.height += mHeaderLayout.getHeight();            params.height += height;            mFragmentContainer.setLayoutParams(params);        }    }, 100);}</code></pre><p>内层：</p><pre><code>private View.OnTouchListener mTouchListener = new View.OnTouchListener() {        @Override        public boolean onTouch(View v, MotionEvent event) {            int action = event.getAction();            switch (action) {            case MotionEvent.ACTION_DOWN: {                mTouchBeginY = event.getY();                v.getParent().requestDisallowInterceptTouchEvent(                        !mOutCanDown || mInCanUp);                break;            }            case MotionEvent.ACTION_UP: {                v.getParent().requestDisallowInterceptTouchEvent(false);                break;            }            case MotionEvent.ACTION_MOVE:                if (event.getY() &gt; mTouchBeginY + 4) {                    v.getParent().requestDisallowInterceptTouchEvent(mInCanUp);                } else if (event.getY() &lt; mTouchBeginY - 4) {                    v.getParent().requestDisallowInterceptTouchEvent(                            !mOutCanDown);                }                break;            }            v.onTouchEvent(event);            return true;        }    };mGalleryView.setOnScrollListener(new AbsListView.OnScrollListener() {            @Override            public void onScrollStateChanged(AbsListView view, int scrollState) {            }            @Override            public void onScroll(AbsListView view, int firstVisibleItem,                    int visibleItemCount, int totalItemCount) {                if (firstVisibleItem == 0) {                    View v = mGalleryView.getChildAt(0);                    if (v != null) {                        setInnerCanUp(v.getBottom() &lt; (v.getHeight() - 8));                    }                } else {                    setInnerCanUp(true);                }            }        });</code></pre><h3 id="需要注意的地方"><a href="#需要注意的地方" class="headerlink" title="需要注意的地方"></a>需要注意的地方</h3><p>对于 setTabPositionValue 方法，每次屏幕高度发生变化时（也就是横竖屏切换时）都需要重新调用一遍。</p><p>但是，怎么处理，我还没想好。</p><h3 id="一些其他问题"><a href="#一些其他问题" class="headerlink" title="一些其他问题"></a>一些其他问题</h3><p>如果因为分发 Touch 事件而导致多点触控导致 crash 的话，可以考虑禁用多点触控。参照 <a href="http://blog.csdn.net/yy958836746/article/details/21536969" target="_blank" rel="noopener">http://blog.csdn.net/yy958836746/article/details/21536969</a>。在 layout 中禁用掉多点触控并不能解决该问题。</p><p>如果有 Sliding Menu，则可以在内层的 TouchListener 的 ACTION_MOVE 中判断横向的移动，代码如下：</p><pre><code>if (mHasSlidingMenu &amp;&amp; event.getX() &lt; mTouchBeginX - 28) {    v.getParent().requestDisallowInterceptTouchEvent(false);    break;}</code></pre><hr><h3 id="新问题"><a href="#新问题" class="headerlink" title="新问题"></a>新问题</h3><p>当内层的 ListView 的元素上有子 View 的 onClick 事件时，处理起来会有问题。需要对点击事件进行额外的判断。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;本篇内容已过时&quot;&gt;&lt;a href=&quot;#本篇内容已过时&quot; class=&quot;headerlink&quot; title=&quot;本篇内容已过时&quot;&gt;&lt;/a&gt;本篇内容已过时&lt;/h2&gt;&lt;p&gt;Update 2015.04.06&lt;/p&gt;
&lt;p&gt;发现了新的方式，实现的效果更好，代码更简练而且 bug 更少。请查阅 &lt;a href=&quot;http://wliu6v.github.io/2015/NestedScrollView/&quot;&gt;NestedScrollView&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;场景描述&quot;&gt;&lt;a href=&quot;#场景描述&quot; class=&quot;headerlink&quot; title=&quot;场景描述&quot;&gt;&lt;/a&gt;场景描述&lt;/h2&gt;&lt;p&gt;对于 Scroll 嵌套 Scroll 这种情况来说，最理想的情况是避免进行这种布局设计。但有时候并非太容易做。比如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/scroll_1.png&quot; alt=&quot;Nested Scroll 示意图&quot;&gt;&lt;/p&gt;
&lt;p&gt;其中，Header 需要能够随着 ListView 的滚动离开屏幕，但 Tab 会留在界面上面。而且通过点击 Tab，需要可以在不同界面中进行切换。&lt;/p&gt;
&lt;p&gt;如果不需要可以切换的 Tab 效果，那么我们可以将 Header 与 Tab 都作为 ListView 的 HeaderView 来实现。但是如果要能够实现 Tab 切换的话，显然我们不能将 Header 对于每个 Tab 中的 ListView 都作为 HeaderView。因此只能将 Tab 与下面的 ListView 视作是同级的控件，然后在外面嵌套一层 ScrollView。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://wliu6v.github.io/tags/Android/"/>
    
  </entry>
  
</feed>
